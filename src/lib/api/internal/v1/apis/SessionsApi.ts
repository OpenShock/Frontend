/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginSessionResponse,
  OpenShockProblem,
} from '../models/index';
import {
    LoginSessionResponseFromJSON,
    LoginSessionResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
} from '../models/index';

export interface SessionsDeleteSessionRequest {
    sessionId: string;
}

/**
 * SessionsApi - interface
 * 
 * @export
 * @interface SessionsApiInterface
 */
export interface SessionsApiInterface {
    /**
     * 
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsDeleteSessionRaw(requestParameters: SessionsDeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     */
    sessionsDeleteSession(sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Gets information about the current token used to access this endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsGetSelfSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginSessionResponse>>;

    /**
     * Gets information about the current token used to access this endpoint
     */
    sessionsGetSelfSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginSessionResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsListSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LoginSessionResponse>>>;

    /**
     */
    sessionsListSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LoginSessionResponse>>;

}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI implements SessionsApiInterface {

    /**
     */
    async sessionsDeleteSessionRaw(requestParameters: SessionsDeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling sessionsDeleteSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/1/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sessionsDeleteSession(sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sessionsDeleteSessionRaw({ sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets information about the current token used to access this endpoint
     */
    async sessionsGetSelfSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/1/sessions/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginSessionResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about the current token used to access this endpoint
     */
    async sessionsGetSelfSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginSessionResponse> {
        const response = await this.sessionsGetSelfSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sessionsListSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LoginSessionResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/1/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LoginSessionResponseFromJSON));
    }

    /**
     */
    async sessionsListSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LoginSessionResponse>> {
        const response = await this.sessionsListSessionsRaw(initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddEmailProviderBlacklistDto,
  AddUsernameBlacklistDto,
  AddWebhookDto,
  AdminOnlineDeviceResponseIEnumerableLegacyDataResponse,
  AdminUsersViewPaginated,
  ConfigurationAddItemRequest,
  ConfigurationItemDto,
  ConfigurationUpdateItemRequest,
  EmailProviderBlacklistDto,
  ProblemDetails,
  UserNameBlacklistDto,
  UserPatchDto,
  WebhookDto,
} from '../models/index';
import {
    AddEmailProviderBlacklistDtoFromJSON,
    AddEmailProviderBlacklistDtoToJSON,
    AddUsernameBlacklistDtoFromJSON,
    AddUsernameBlacklistDtoToJSON,
    AddWebhookDtoFromJSON,
    AddWebhookDtoToJSON,
    AdminOnlineDeviceResponseIEnumerableLegacyDataResponseFromJSON,
    AdminOnlineDeviceResponseIEnumerableLegacyDataResponseToJSON,
    AdminUsersViewPaginatedFromJSON,
    AdminUsersViewPaginatedToJSON,
    ConfigurationAddItemRequestFromJSON,
    ConfigurationAddItemRequestToJSON,
    ConfigurationItemDtoFromJSON,
    ConfigurationItemDtoToJSON,
    ConfigurationUpdateItemRequestFromJSON,
    ConfigurationUpdateItemRequestToJSON,
    EmailProviderBlacklistDtoFromJSON,
    EmailProviderBlacklistDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserNameBlacklistDtoFromJSON,
    UserNameBlacklistDtoToJSON,
    UserPatchDtoFromJSON,
    UserPatchDtoToJSON,
    WebhookDtoFromJSON,
    WebhookDtoToJSON,
} from '../models/index';

export interface AdminAddEmailProviderBlacklistRequest {
    addEmailProviderBlacklistDto?: AddEmailProviderBlacklistDto;
}

export interface AdminAddUsernameBlacklistRequest {
    addUsernameBlacklistDto?: AddUsernameBlacklistDto;
}

export interface AdminAddWebhookRequest {
    addWebhookDto?: AddWebhookDto;
}

export interface AdminConfigurationAddRequest {
    configurationAddItemRequest?: ConfigurationAddItemRequest;
}

export interface AdminConfigurationDeleteRequest {
    name: string;
}

export interface AdminConfigurationUpdateRequest {
    configurationUpdateItemRequest?: ConfigurationUpdateItemRequest;
}

export interface AdminDeactivateUserRequest {
    userId: string;
    deleteLater?: boolean;
}

export interface AdminDeleteUserRequest {
    userId: string;
}

export interface AdminGetUsersRequest {
    $filter?: string;
    $orderby?: string;
    $offset?: number;
    $limit?: number;
}

export interface AdminListEmailProviderBlacklistRequest {
    match?: string;
}

export interface AdminListUsernameBlacklistRequest {
    match?: string;
}

export interface AdminModifyUserRequest {
    userId: string;
    userPatchDto?: UserPatchDto;
}

export interface AdminReactivateUserRequest {
    userId: string;
}

export interface AdminRemoveEmailProviderBlacklistRequest {
    id: string;
}

export interface AdminRemoveUsernameBlacklistRequest {
    id: string;
}

export interface AdminRemoveWebhookRequest {
    id: string;
}

/**
 * AdminApi - interface
 * 
 * @export
 * @interface AdminApiInterface
 */
export interface AdminApiInterface {
    /**
     * 
     * @param {AddEmailProviderBlacklistDto} [addEmailProviderBlacklistDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminAddEmailProviderBlacklistRaw(requestParameters: AdminAddEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    adminAddEmailProviderBlacklist(addEmailProviderBlacklistDto?: AddEmailProviderBlacklistDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {AddUsernameBlacklistDto} [addUsernameBlacklistDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminAddUsernameBlacklistRaw(requestParameters: AdminAddUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    adminAddUsernameBlacklist(addUsernameBlacklistDto?: AddUsernameBlacklistDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Creates a webhook
     * @param {AddWebhookDto} [addWebhookDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminAddWebhookRaw(requestParameters: AdminAddWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Creates a webhook
     */
    adminAddWebhook(addWebhookDto?: AddWebhookDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Adds a new configuration
     * @param {ConfigurationAddItemRequest} [configurationAddItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminConfigurationAddRaw(requestParameters: AdminConfigurationAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Adds a new configuration
     */
    adminConfigurationAdd(configurationAddItemRequest?: ConfigurationAddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Deletes a configuration
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminConfigurationDeleteRaw(requestParameters: AdminConfigurationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a configuration
     */
    adminConfigurationDelete(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Gets all configuration items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminConfigurationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConfigurationItemDto>>>;

    /**
     * Gets all configuration items
     */
    adminConfigurationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConfigurationItemDto>>;

    /**
     * 
     * @summary Updates an existing configuration
     * @param {ConfigurationUpdateItemRequest} [configurationUpdateItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminConfigurationUpdateRaw(requestParameters: AdminConfigurationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing configuration
     */
    adminConfigurationUpdate(configurationUpdateItemRequest?: ConfigurationUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Deactivates a user
     * @param {string} userId 
     * @param {boolean} [deleteLater] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminDeactivateUserRaw(requestParameters: AdminDeactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deactivates a user
     */
    adminDeactivateUser(userId: string, deleteLater?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Deletes a user
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminDeleteUserRaw(requestParameters: AdminDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a user
     */
    adminDeleteUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Gets all online devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminGetOnlineDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOnlineDeviceResponseIEnumerableLegacyDataResponse>>;

    /**
     * Gets all online devices
     */
    adminGetOnlineDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOnlineDeviceResponseIEnumerableLegacyDataResponse>;

    /**
     * 
     * @summary Gets all users, paginated
     * @param {string} [$filter] 
     * @param {string} [$orderby] 
     * @param {number} [$offset] 
     * @param {number} [$limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminGetUsersRaw(requestParameters: AdminGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsersViewPaginated>>;

    /**
     * Gets all users, paginated
     */
    adminGetUsers($filter?: string, $orderby?: string, $offset?: number, $limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsersViewPaginated>;

    /**
     * 
     * @param {string} [match] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminListEmailProviderBlacklistRaw(requestParameters: AdminListEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmailProviderBlacklistDto>>>;

    /**
     */
    adminListEmailProviderBlacklist(match?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmailProviderBlacklistDto>>;

    /**
     * 
     * @param {string} [match] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminListUsernameBlacklistRaw(requestParameters: AdminListUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserNameBlacklistDto>>>;

    /**
     */
    adminListUsernameBlacklist(match?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserNameBlacklistDto>>;

    /**
     * 
     * @summary List webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminListWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebhookDto>>>;

    /**
     * List webhooks
     */
    adminListWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebhookDto>>;

    /**
     * 
     * @summary Edits a user
     * @param {string} userId 
     * @param {UserPatchDto} [userPatchDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminModifyUserRaw(requestParameters: AdminModifyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Edits a user
     */
    adminModifyUser(userId: string, userPatchDto?: UserPatchDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Reactivates a user
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminReactivateUserRaw(requestParameters: AdminReactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Reactivates a user
     */
    adminReactivateUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminRemoveEmailProviderBlacklistRaw(requestParameters: AdminRemoveEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    adminRemoveEmailProviderBlacklist(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminRemoveUsernameBlacklistRaw(requestParameters: AdminRemoveUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    adminRemoveUsernameBlacklist(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Removes a webhook
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminRemoveWebhookRaw(requestParameters: AdminRemoveWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a webhook
     */
    adminRemoveWebhook(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI implements AdminApiInterface {

    /**
     */
    async adminAddEmailProviderBlacklistRaw(requestParameters: AdminAddEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/blacklist/emailProviders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddEmailProviderBlacklistDtoToJSON(requestParameters['addEmailProviderBlacklistDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminAddEmailProviderBlacklist(addEmailProviderBlacklistDto?: AddEmailProviderBlacklistDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminAddEmailProviderBlacklistRaw({ addEmailProviderBlacklistDto: addEmailProviderBlacklistDto }, initOverrides);
    }

    /**
     */
    async adminAddUsernameBlacklistRaw(requestParameters: AdminAddUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/blacklist/usernames`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUsernameBlacklistDtoToJSON(requestParameters['addUsernameBlacklistDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminAddUsernameBlacklist(addUsernameBlacklistDto?: AddUsernameBlacklistDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminAddUsernameBlacklistRaw({ addUsernameBlacklistDto: addUsernameBlacklistDto }, initOverrides);
    }

    /**
     * Creates a webhook
     */
    async adminAddWebhookRaw(requestParameters: AdminAddWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/webhooks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWebhookDtoToJSON(requestParameters['addWebhookDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a webhook
     */
    async adminAddWebhook(addWebhookDto?: AddWebhookDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminAddWebhookRaw({ addWebhookDto: addWebhookDto }, initOverrides);
    }

    /**
     * Adds a new configuration
     */
    async adminConfigurationAddRaw(requestParameters: AdminConfigurationAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/config`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationAddItemRequestToJSON(requestParameters['configurationAddItemRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a new configuration
     */
    async adminConfigurationAdd(configurationAddItemRequest?: ConfigurationAddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminConfigurationAddRaw({ configurationAddItemRequest: configurationAddItemRequest }, initOverrides);
    }

    /**
     * Deletes a configuration
     */
    async adminConfigurationDeleteRaw(requestParameters: AdminConfigurationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling adminConfigurationDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/config/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a configuration
     */
    async adminConfigurationDelete(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminConfigurationDeleteRaw({ name: name }, initOverrides);
    }

    /**
     * Gets all configuration items
     */
    async adminConfigurationListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConfigurationItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigurationItemDtoFromJSON));
    }

    /**
     * Gets all configuration items
     */
    async adminConfigurationList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConfigurationItemDto>> {
        const response = await this.adminConfigurationListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing configuration
     */
    async adminConfigurationUpdateRaw(requestParameters: AdminConfigurationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/config`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigurationUpdateItemRequestToJSON(requestParameters['configurationUpdateItemRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing configuration
     */
    async adminConfigurationUpdate(configurationUpdateItemRequest?: ConfigurationUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminConfigurationUpdateRaw({ configurationUpdateItemRequest: configurationUpdateItemRequest }, initOverrides);
    }

    /**
     * Deactivates a user
     */
    async adminDeactivateUserRaw(requestParameters: AdminDeactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminDeactivateUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteLater'] != null) {
            queryParameters['deleteLater'] = requestParameters['deleteLater'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/users/{userId}/deactivate`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivates a user
     */
    async adminDeactivateUser(userId: string, deleteLater?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminDeactivateUserRaw({ userId: userId, deleteLater: deleteLater }, initOverrides);
    }

    /**
     * Deletes a user
     */
    async adminDeleteUserRaw(requestParameters: AdminDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a user
     */
    async adminDeleteUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminDeleteUserRaw({ userId: userId }, initOverrides);
    }

    /**
     * Gets all online devices
     */
    async adminGetOnlineDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOnlineDeviceResponseIEnumerableLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/monitoring/onlineDevices`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOnlineDeviceResponseIEnumerableLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Gets all online devices
     */
    async adminGetOnlineDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOnlineDeviceResponseIEnumerableLegacyDataResponse> {
        const response = await this.adminGetOnlineDevicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets all users, paginated
     */
    async adminGetUsersRaw(requestParameters: AdminGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsersViewPaginated>> {
        const queryParameters: any = {};

        if (requestParameters['$filter'] != null) {
            queryParameters['$filter'] = requestParameters['$filter'];
        }

        if (requestParameters['$orderby'] != null) {
            queryParameters['$orderby'] = requestParameters['$orderby'];
        }

        if (requestParameters['$offset'] != null) {
            queryParameters['$offset'] = requestParameters['$offset'];
        }

        if (requestParameters['$limit'] != null) {
            queryParameters['$limit'] = requestParameters['$limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUsersViewPaginatedFromJSON(jsonValue));
    }

    /**
     * Gets all users, paginated
     */
    async adminGetUsers($filter?: string, $orderby?: string, $offset?: number, $limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsersViewPaginated> {
        const response = await this.adminGetUsersRaw({ $filter: $filter, $orderby: $orderby, $offset: $offset, $limit: $limit }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminListEmailProviderBlacklistRaw(requestParameters: AdminListEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmailProviderBlacklistDto>>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/blacklist/emailProviders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailProviderBlacklistDtoFromJSON));
    }

    /**
     */
    async adminListEmailProviderBlacklist(match?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmailProviderBlacklistDto>> {
        const response = await this.adminListEmailProviderBlacklistRaw({ match: match }, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminListUsernameBlacklistRaw(requestParameters: AdminListUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserNameBlacklistDto>>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/blacklist/usernames`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserNameBlacklistDtoFromJSON));
    }

    /**
     */
    async adminListUsernameBlacklist(match?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserNameBlacklistDto>> {
        const response = await this.adminListUsernameBlacklistRaw({ match: match }, initOverrides);
        return await response.value();
    }

    /**
     * List webhooks
     */
    async adminListWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebhookDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/webhooks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookDtoFromJSON));
    }

    /**
     * List webhooks
     */
    async adminListWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebhookDto>> {
        const response = await this.adminListWebhooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Edits a user
     */
    async adminModifyUserRaw(requestParameters: AdminModifyUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminModifyUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/admin/users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPatchDtoToJSON(requestParameters['userPatchDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edits a user
     */
    async adminModifyUser(userId: string, userPatchDto?: UserPatchDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminModifyUserRaw({ userId: userId, userPatchDto: userPatchDto }, initOverrides);
    }

    /**
     * Reactivates a user
     */
    async adminReactivateUserRaw(requestParameters: AdminReactivateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminReactivateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/users/{userId}/reactivate`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reactivates a user
     */
    async adminReactivateUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminReactivateUserRaw({ userId: userId }, initOverrides);
    }

    /**
     */
    async adminRemoveEmailProviderBlacklistRaw(requestParameters: AdminRemoveEmailProviderBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRemoveEmailProviderBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/blacklist/emailProviders/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRemoveEmailProviderBlacklist(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRemoveEmailProviderBlacklistRaw({ id: id }, initOverrides);
    }

    /**
     */
    async adminRemoveUsernameBlacklistRaw(requestParameters: AdminRemoveUsernameBlacklistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRemoveUsernameBlacklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/blacklist/usernames/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminRemoveUsernameBlacklist(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRemoveUsernameBlacklistRaw({ id: id }, initOverrides);
    }

    /**
     * Removes a webhook
     */
    async adminRemoveWebhookRaw(requestParameters: AdminRemoveWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminRemoveWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/admin/webhooks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a webhook
     */
    async adminRemoveWebhook(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminRemoveWebhookRaw({ id: id }, initOverrides);
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanBaseResponse,
  BooleanNullableBaseResponse,
  Control,
  GuidBaseResponse,
  LogEntryIEnumerableBaseResponse,
  NewShocker,
  ObjectBaseResponse,
  OpenShockProblem,
  OwnerShockerResponseIEnumerableIEnumerableBaseResponse,
  PauseRequest,
  ResponseDeviceWithShockersIEnumerableBaseResponse,
  ShareCodeInfoIEnumerableBaseResponse,
  ShareInfoIEnumerableBaseResponse,
  ShockerPermLimitPair,
  ShockerWithDeviceBaseResponse,
} from '../models/index';
import {
    BooleanBaseResponseFromJSON,
    BooleanBaseResponseToJSON,
    BooleanNullableBaseResponseFromJSON,
    BooleanNullableBaseResponseToJSON,
    ControlFromJSON,
    ControlToJSON,
    GuidBaseResponseFromJSON,
    GuidBaseResponseToJSON,
    LogEntryIEnumerableBaseResponseFromJSON,
    LogEntryIEnumerableBaseResponseToJSON,
    NewShockerFromJSON,
    NewShockerToJSON,
    ObjectBaseResponseFromJSON,
    ObjectBaseResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    OwnerShockerResponseIEnumerableIEnumerableBaseResponseFromJSON,
    OwnerShockerResponseIEnumerableIEnumerableBaseResponseToJSON,
    PauseRequestFromJSON,
    PauseRequestToJSON,
    ResponseDeviceWithShockersIEnumerableBaseResponseFromJSON,
    ResponseDeviceWithShockersIEnumerableBaseResponseToJSON,
    ShareCodeInfoIEnumerableBaseResponseFromJSON,
    ShareCodeInfoIEnumerableBaseResponseToJSON,
    ShareInfoIEnumerableBaseResponseFromJSON,
    ShareInfoIEnumerableBaseResponseToJSON,
    ShockerPermLimitPairFromJSON,
    ShockerPermLimitPairToJSON,
    ShockerWithDeviceBaseResponseFromJSON,
    ShockerWithDeviceBaseResponseToJSON,
} from '../models/index';

export interface ShockerEditShockerRequest {
    shockerId: string;
    newShocker?: NewShocker;
}

export interface ShockerGetShockerByIdRequest {
    shockerId: string;
}

export interface ShockerGetShockerLogsRequest {
    shockerId: string;
    offset?: number;
    limit?: number;
}

export interface ShockerGetShockerSharesRequest {
    shockerId: string;
}

export interface ShockerPauseShockerRequest {
    shockerId: string;
    pauseRequest?: PauseRequest;
}

export interface ShockerRegisterShockerRequest {
    newShocker?: NewShocker;
}

export interface ShockerRemoveShockerRequest {
    shockerId: string;
}

export interface ShockerSendControlDEPRECATEDRequest {
    control?: Array<Control>;
}

export interface ShockerShockerShareCodeCreateRequest {
    shockerId: string;
    shockerPermLimitPair?: ShockerPermLimitPair;
}

export interface ShockerShockerShareCodeListRequest {
    shockerId: string;
}

export interface ShockerShockerShareCodePauseRequest {
    shockerId: string;
    sharedWithUserId: string;
    pauseRequest?: PauseRequest;
}

export interface ShockerShockerShareCodeRemoveRequest {
    shockerId: string;
    sharedWithUserId: string;
}

export interface ShockerShockerShareCodeUpdateRequest {
    shockerId: string;
    sharedWithUserId: string;
    shockerPermLimitPair?: ShockerPermLimitPair;
}

/**
 * ShockerApi - interface
 * 
 * @export
 * @interface ShockerApiInterface
 */
export interface ShockerApiInterface {
    /**
     * 
     * @summary Edit a shocker
     * @param {string} shockerId 
     * @param {NewShocker} [newShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerEditShockerRaw(requestParameters: ShockerEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Edit a shocker
     */
    shockerEditShocker(shockerId: string, newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

    /**
     * 
     * @summary Get information about a shocker.
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerGetShockerByIdRaw(requestParameters: ShockerGetShockerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerWithDeviceBaseResponse>>;

    /**
     * Get information about a shocker.
     */
    shockerGetShockerById(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerWithDeviceBaseResponse>;

    /**
     * 
     * @summary Get the logs for a shocker
     * @param {string} shockerId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerGetShockerLogsRaw(requestParameters: ShockerGetShockerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogEntryIEnumerableBaseResponse>>;

    /**
     * Get the logs for a shocker
     */
    shockerGetShockerLogs(shockerId: string, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogEntryIEnumerableBaseResponse>;

    /**
     * 
     * @summary Get all shares for a shocker
     * @param {string} shockerId Id of the shocker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerGetShockerSharesRaw(requestParameters: ShockerGetShockerSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfoIEnumerableBaseResponse>>;

    /**
     * Get all shares for a shocker
     */
    shockerGetShockerShares(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfoIEnumerableBaseResponse>;

    /**
     * 
     * @summary List all shockers shared with the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerListSharedShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnerShockerResponseIEnumerableIEnumerableBaseResponse>>;

    /**
     * List all shockers shared with the authenticated user.
     */
    shockerListSharedShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnerShockerResponseIEnumerableIEnumerableBaseResponse>;

    /**
     * 
     * @summary List all shockers belonging to the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerListShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithShockersIEnumerableBaseResponse>>;

    /**
     * List all shockers belonging to the authenticated user.
     */
    shockerListShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithShockersIEnumerableBaseResponse>;

    /**
     * 
     * @summary Pause or unpause a shocker
     * @param {string} shockerId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerPauseShockerRaw(requestParameters: ShockerPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNullableBaseResponse>>;

    /**
     * Pause or unpause a shocker
     */
    shockerPauseShocker(shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNullableBaseResponse>;

    /**
     * 
     * @summary Register a shocker
     * @param {NewShocker} [newShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerRegisterShockerRaw(requestParameters: ShockerRegisterShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>>;

    /**
     * Register a shocker
     */
    shockerRegisterShocker(newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse>;

    /**
     * 
     * @summary Remove a shocker
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerRemoveShockerRaw(requestParameters: ShockerRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Remove a shocker
     */
    shockerRemoveShocker(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

    /**
     * 
     * @summary Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     * @param {Array<Control>} [control] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerSendControlDEPRECATEDRaw(requestParameters: ShockerSendControlDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    shockerSendControlDEPRECATED(control?: Array<Control>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

    /**
     * 
     * @summary Create a share code for a shocker
     * @param {string} shockerId 
     * @param {ShockerPermLimitPair} [shockerPermLimitPair] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerShockerShareCodeCreateRaw(requestParameters: ShockerShockerShareCodeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>>;

    /**
     * Create a share code for a shocker
     */
    shockerShockerShareCodeCreate(shockerId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse>;

    /**
     * 
     * @summary List all share codes for a shocker
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerShockerShareCodeListRaw(requestParameters: ShockerShockerShareCodeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeInfoIEnumerableBaseResponse>>;

    /**
     * List all share codes for a shocker
     */
    shockerShockerShareCodeList(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeInfoIEnumerableBaseResponse>;

    /**
     * 
     * @summary Pause/Unpause a share code for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerShockerShareCodePauseRaw(requestParameters: ShockerShockerShareCodePauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponse>>;

    /**
     * Pause/Unpause a share code for a shocker
     */
    shockerShockerShareCodePause(shockerId: string, sharedWithUserId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponse>;

    /**
     * 
     * @summary Remove a share code for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerShockerShareCodeRemoveRaw(requestParameters: ShockerShockerShareCodeRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove a share code for a shocker
     */
    shockerShockerShareCodeRemove(shockerId: string, sharedWithUserId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update a share for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {ShockerPermLimitPair} [shockerPermLimitPair] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockerApiInterface
     */
    shockerShockerShareCodeUpdateRaw(requestParameters: ShockerShockerShareCodeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update a share for a shocker
     */
    shockerShockerShareCodeUpdate(shockerId: string, sharedWithUserId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ShockerApi extends runtime.BaseAPI implements ShockerApiInterface {

    /**
     * Edit a shocker
     */
    async shockerEditShockerRaw(requestParameters: ShockerEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerEditShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NewShockerToJSON(requestParameters['newShocker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Edit a shocker
     */
    async shockerEditShocker(shockerId: string, newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shockerEditShockerRaw({ shockerId: shockerId, newShocker: newShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Get information about a shocker.
     */
    async shockerGetShockerByIdRaw(requestParameters: ShockerGetShockerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerWithDeviceBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetShockerById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShockerWithDeviceBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get information about a shocker.
     */
    async shockerGetShockerById(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerWithDeviceBaseResponse> {
        const response = await this.shockerGetShockerByIdRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Get the logs for a shocker
     */
    async shockerGetShockerLogsRaw(requestParameters: ShockerGetShockerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogEntryIEnumerableBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetShockerLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/logs`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogEntryIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get the logs for a shocker
     */
    async shockerGetShockerLogs(shockerId: string, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogEntryIEnumerableBaseResponse> {
        const response = await this.shockerGetShockerLogsRaw({ shockerId: shockerId, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Get all shares for a shocker
     */
    async shockerGetShockerSharesRaw(requestParameters: ShockerGetShockerSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfoIEnumerableBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetShockerShares().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shares`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareInfoIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get all shares for a shocker
     */
    async shockerGetShockerShares(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfoIEnumerableBaseResponse> {
        const response = await this.shockerGetShockerSharesRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * List all shockers shared with the authenticated user.
     */
    async shockerListSharedShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnerShockerResponseIEnumerableIEnumerableBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/shared`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnerShockerResponseIEnumerableIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * List all shockers shared with the authenticated user.
     */
    async shockerListSharedShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnerShockerResponseIEnumerableIEnumerableBaseResponse> {
        const response = await this.shockerListSharedShockersRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all shockers belonging to the authenticated user.
     */
    async shockerListShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithShockersIEnumerableBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/own`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDeviceWithShockersIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * List all shockers belonging to the authenticated user.
     */
    async shockerListShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithShockersIEnumerableBaseResponse> {
        const response = await this.shockerListShockersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause or unpause a shocker
     */
    async shockerPauseShockerRaw(requestParameters: ShockerPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanNullableBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerPauseShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/pause`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanNullableBaseResponseFromJSON(jsonValue));
    }

    /**
     * Pause or unpause a shocker
     */
    async shockerPauseShocker(shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanNullableBaseResponse> {
        const response = await this.shockerPauseShockerRaw({ shockerId: shockerId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register a shocker
     */
    async shockerRegisterShockerRaw(requestParameters: ShockerRegisterShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewShockerToJSON(requestParameters['newShocker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidBaseResponseFromJSON(jsonValue));
    }

    /**
     * Register a shocker
     */
    async shockerRegisterShocker(newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse> {
        const response = await this.shockerRegisterShockerRaw({ newShocker: newShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a shocker
     */
    async shockerRemoveShockerRaw(requestParameters: ShockerRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerRemoveShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Remove a shocker
     */
    async shockerRemoveShocker(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shockerRemoveShockerRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    async shockerSendControlDEPRECATEDRaw(requestParameters: ShockerSendControlDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/control`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['control']!.map(ControlToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    async shockerSendControlDEPRECATED(control?: Array<Control>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shockerSendControlDEPRECATEDRaw({ control: control }, initOverrides);
        return await response.value();
    }

    /**
     * Create a share code for a shocker
     */
    async shockerShockerShareCodeCreateRaw(requestParameters: ShockerShockerShareCodeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shares`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShockerPermLimitPairToJSON(requestParameters['shockerPermLimitPair']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidBaseResponseFromJSON(jsonValue));
    }

    /**
     * Create a share code for a shocker
     */
    async shockerShockerShareCodeCreate(shockerId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse> {
        const response = await this.shockerShockerShareCodeCreateRaw({ shockerId: shockerId, shockerPermLimitPair: shockerPermLimitPair }, initOverrides);
        return await response.value();
    }

    /**
     * List all share codes for a shocker
     */
    async shockerShockerShareCodeListRaw(requestParameters: ShockerShockerShareCodeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeInfoIEnumerableBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shareCodes`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareCodeInfoIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * List all share codes for a shocker
     */
    async shockerShockerShareCodeList(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeInfoIEnumerableBaseResponse> {
        const response = await this.shockerShockerShareCodeListRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Pause/Unpause a share code for a shocker
     */
    async shockerShockerShareCodePauseRaw(requestParameters: ShockerShockerShareCodePauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanBaseResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodePause().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareCodePause().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shares/{sharedWithUserId}/pause`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))).replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanBaseResponseFromJSON(jsonValue));
    }

    /**
     * Pause/Unpause a share code for a shocker
     */
    async shockerShockerShareCodePause(shockerId: string, sharedWithUserId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanBaseResponse> {
        const response = await this.shockerShockerShareCodePauseRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a share code for a shocker
     */
    async shockerShockerShareCodeRemoveRaw(requestParameters: ShockerShockerShareCodeRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeRemove().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareCodeRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shares/{sharedWithUserId}`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))).replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a share code for a shocker
     */
    async shockerShockerShareCodeRemove(shockerId: string, sharedWithUserId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shockerShockerShareCodeRemoveRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId }, initOverrides);
    }

    /**
     * Update a share for a shocker
     */
    async shockerShockerShareCodeUpdateRaw(requestParameters: ShockerShockerShareCodeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeUpdate().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareCodeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shockers/{shockerId}/shares/{sharedWithUserId}`.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))).replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShockerPermLimitPairToJSON(requestParameters['shockerPermLimitPair']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a share for a shocker
     */
    async shockerShockerShareCodeUpdate(shockerId: string, sharedWithUserId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shockerShockerShareCodeUpdateRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId, shockerPermLimitPair: shockerPermLimitPair }, initOverrides);
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GuidLegacyDataResponse,
  LegacyEmptyResponse,
  OpenShockProblem,
  OwnPublicShareResponseIAsyncEnumerableLegacyDataResponse,
  PauseReasonLegacyDataResponse,
  PauseRequest,
  PublicShareCreate,
  PublicShareEditShocker,
  PublicShareResponseLegacyDataResponse,
} from '../models/index';
import {
    GuidLegacyDataResponseFromJSON,
    GuidLegacyDataResponseToJSON,
    LegacyEmptyResponseFromJSON,
    LegacyEmptyResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    OwnPublicShareResponseIAsyncEnumerableLegacyDataResponseFromJSON,
    OwnPublicShareResponseIAsyncEnumerableLegacyDataResponseToJSON,
    PauseReasonLegacyDataResponseFromJSON,
    PauseReasonLegacyDataResponseToJSON,
    PauseRequestFromJSON,
    PauseRequestToJSON,
    PublicShareCreateFromJSON,
    PublicShareCreateToJSON,
    PublicShareEditShockerFromJSON,
    PublicShareEditShockerToJSON,
    PublicShareResponseLegacyDataResponseFromJSON,
    PublicShareResponseLegacyDataResponseToJSON,
} from '../models/index';

export interface PublicGetPublicShareRequest {
    publicShareId: string;
}

export interface ShareLinksAddShockerRequest {
    publicShareId: string;
    shockerId: string;
}

export interface ShareLinksCreatePublicShareRequest {
    publicShareCreate?: PublicShareCreate;
}

export interface ShareLinksDeletePublicShareRequest {
    publicShareId: string;
}

export interface ShareLinksEditShockerRequest {
    publicShareId: string;
    shockerId: string;
    publicShareEditShocker?: PublicShareEditShocker;
}

export interface ShareLinksPauseShockerRequest {
    publicShareId: string;
    shockerId: string;
    pauseRequest?: PauseRequest;
}

export interface ShareLinksRemoveShockerRequest {
    publicShareId: string;
    shockerId: string;
}

/**
 * PublicShockerSharesApi - interface
 * 
 * @export
 * @interface PublicShockerSharesApiInterface
 */
export interface PublicShockerSharesApiInterface {
    /**
     * 
     * @summary Gets information about a public share.
     * @param {string} publicShareId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    publicGetPublicShareRaw(requestParameters: PublicGetPublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicShareResponseLegacyDataResponse>>;

    /**
     * Gets information about a public share.
     */
    publicGetPublicShare(publicShareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicShareResponseLegacyDataResponse>;

    /**
     * 
     * @summary Add a shocker to a public share
     * @param {string} publicShareId 
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksAddShockerRaw(requestParameters: ShareLinksAddShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Add a shocker to a public share
     */
    shareLinksAddShocker(publicShareId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Create a new public share
     * @param {PublicShareCreate} [publicShareCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksCreatePublicShareRaw(requestParameters: ShareLinksCreatePublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>>;

    /**
     * Create a new public share
     */
    shareLinksCreatePublicShare(publicShareCreate?: PublicShareCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse>;

    /**
     * 
     * @summary Deletes a public share
     * @param {string} publicShareId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksDeletePublicShareRaw(requestParameters: ShareLinksDeletePublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Deletes a public share
     */
    shareLinksDeletePublicShare(publicShareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Edit a shocker in a public share
     * @param {string} publicShareId 
     * @param {string} shockerId 
     * @param {PublicShareEditShocker} [publicShareEditShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksEditShockerRaw(requestParameters: ShareLinksEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Edit a shocker in a public share
     */
    shareLinksEditShocker(publicShareId: string, shockerId: string, publicShareEditShocker?: PublicShareEditShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Get all public shares for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnPublicShareResponseIAsyncEnumerableLegacyDataResponse>>;

    /**
     * Get all public shares for the current user
     */
    shareLinksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnPublicShareResponseIAsyncEnumerableLegacyDataResponse>;

    /**
     * 
     * @summary Pause a shocker in a public share
     * @param {string} publicShareId 
     * @param {string} shockerId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksPauseShockerRaw(requestParameters: ShareLinksPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseReasonLegacyDataResponse>>;

    /**
     * Pause a shocker in a public share
     */
    shareLinksPauseShocker(publicShareId: string, shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseReasonLegacyDataResponse>;

    /**
     * 
     * @summary Remove a shocker from a public share
     * @param {string} publicShareId 
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicShockerSharesApiInterface
     */
    shareLinksRemoveShockerRaw(requestParameters: ShareLinksRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Remove a shocker from a public share
     */
    shareLinksRemoveShocker(publicShareId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

}

/**
 * 
 */
export class PublicShockerSharesApi extends runtime.BaseAPI implements PublicShockerSharesApiInterface {

    /**
     * Gets information about a public share.
     */
    async publicGetPublicShareRaw(requestParameters: PublicGetPublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicShareResponseLegacyDataResponse>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling publicGetPublicShare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/public/shares/links/{publicShareId}`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicShareResponseLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about a public share.
     */
    async publicGetPublicShare(publicShareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicShareResponseLegacyDataResponse> {
        const response = await this.publicGetPublicShareRaw({ publicShareId: publicShareId }, initOverrides);
        return await response.value();
    }

    /**
     * Add a shocker to a public share
     */
    async shareLinksAddShockerRaw(requestParameters: ShareLinksAddShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling shareLinksAddShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksAddShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/shares/links/{publicShareId}/{shockerId}`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Add a shocker to a public share
     */
    async shareLinksAddShocker(publicShareId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shareLinksAddShockerRaw({ publicShareId: publicShareId, shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new public share
     */
    async shareLinksCreatePublicShareRaw(requestParameters: ShareLinksCreatePublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/shares/links`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicShareCreateToJSON(requestParameters['publicShareCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Create a new public share
     */
    async shareLinksCreatePublicShare(publicShareCreate?: PublicShareCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse> {
        const response = await this.shareLinksCreatePublicShareRaw({ publicShareCreate: publicShareCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a public share
     */
    async shareLinksDeletePublicShareRaw(requestParameters: ShareLinksDeletePublicShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling shareLinksDeletePublicShare().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/shares/links/{publicShareId}`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a public share
     */
    async shareLinksDeletePublicShare(publicShareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shareLinksDeletePublicShareRaw({ publicShareId: publicShareId }, initOverrides);
        return await response.value();
    }

    /**
     * Edit a shocker in a public share
     */
    async shareLinksEditShockerRaw(requestParameters: ShareLinksEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling shareLinksEditShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksEditShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/shares/links/{publicShareId}/{shockerId}`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicShareEditShockerToJSON(requestParameters['publicShareEditShocker']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Edit a shocker in a public share
     */
    async shareLinksEditShocker(publicShareId: string, shockerId: string, publicShareEditShocker?: PublicShareEditShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.shareLinksEditShockerRaw({ publicShareId: publicShareId, shockerId: shockerId, publicShareEditShocker: publicShareEditShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Get all public shares for the current user
     */
    async shareLinksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnPublicShareResponseIAsyncEnumerableLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/shares/links`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnPublicShareResponseIAsyncEnumerableLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Get all public shares for the current user
     */
    async shareLinksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnPublicShareResponseIAsyncEnumerableLegacyDataResponse> {
        const response = await this.shareLinksListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause a shocker in a public share
     */
    async shareLinksPauseShockerRaw(requestParameters: ShareLinksPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseReasonLegacyDataResponse>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling shareLinksPauseShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksPauseShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/shares/links/{publicShareId}/{shockerId}/pause`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PauseReasonLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Pause a shocker in a public share
     */
    async shareLinksPauseShocker(publicShareId: string, shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseReasonLegacyDataResponse> {
        const response = await this.shareLinksPauseShockerRaw({ publicShareId: publicShareId, shockerId: shockerId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a shocker from a public share
     */
    async shareLinksRemoveShockerRaw(requestParameters: ShareLinksRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['publicShareId'] == null) {
            throw new runtime.RequiredError(
                'publicShareId',
                'Required parameter "publicShareId" was null or undefined when calling shareLinksRemoveShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksRemoveShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/shares/links/{publicShareId}/{shockerId}`;
        urlPath = urlPath.replace(`{${"publicShareId"}}`, encodeURIComponent(String(requestParameters['publicShareId'])));
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Remove a shocker from a public share
     */
    async shareLinksRemoveShocker(publicShareId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shareLinksRemoveShockerRaw({ publicShareId: publicShareId, shockerId: shockerId }, initOverrides);
        return await response.value();
    }

}

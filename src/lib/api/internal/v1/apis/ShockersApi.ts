/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanLegacyDataResponse,
  Control,
  GuidLegacyDataResponse,
  LegacyEmptyResponse,
  LogEntryArrayLegacyDataResponse,
  NewShocker,
  OpenShockProblem,
  OwnerShockerResponseArrayLegacyDataResponse,
  PauseRequest,
  ResponseDeviceWithShockersArrayLegacyDataResponse,
  ShareCodeInfoArrayLegacyDataResponse,
  ShareInfoArrayLegacyDataResponse,
  ShockerPermLimitPair,
  ShockerWithDeviceLegacyDataResponse,
} from '../models/index';
import {
    BooleanLegacyDataResponseFromJSON,
    BooleanLegacyDataResponseToJSON,
    ControlFromJSON,
    ControlToJSON,
    GuidLegacyDataResponseFromJSON,
    GuidLegacyDataResponseToJSON,
    LegacyEmptyResponseFromJSON,
    LegacyEmptyResponseToJSON,
    LogEntryArrayLegacyDataResponseFromJSON,
    LogEntryArrayLegacyDataResponseToJSON,
    NewShockerFromJSON,
    NewShockerToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    OwnerShockerResponseArrayLegacyDataResponseFromJSON,
    OwnerShockerResponseArrayLegacyDataResponseToJSON,
    PauseRequestFromJSON,
    PauseRequestToJSON,
    ResponseDeviceWithShockersArrayLegacyDataResponseFromJSON,
    ResponseDeviceWithShockersArrayLegacyDataResponseToJSON,
    ShareCodeInfoArrayLegacyDataResponseFromJSON,
    ShareCodeInfoArrayLegacyDataResponseToJSON,
    ShareInfoArrayLegacyDataResponseFromJSON,
    ShareInfoArrayLegacyDataResponseToJSON,
    ShockerPermLimitPairFromJSON,
    ShockerPermLimitPairToJSON,
    ShockerWithDeviceLegacyDataResponseFromJSON,
    ShockerWithDeviceLegacyDataResponseToJSON,
} from '../models/index';

export interface ShockerEditShockerRequest {
    shockerId: string;
    newShocker?: NewShocker;
}

export interface ShockerGetShockerByIdRequest {
    shockerId: string;
}

export interface ShockerGetShockerLogsRequest {
    shockerId: string;
    offset?: number;
    limit?: number;
}

export interface ShockerGetUserSharesRequest {
    shockerId: string;
}

export interface ShockerPauseShockerRequest {
    shockerId: string;
    pauseRequest?: PauseRequest;
}

export interface ShockerRegisterShockerRequest {
    newShocker?: NewShocker;
}

export interface ShockerRemoveShockerRequest {
    shockerId: string;
}

export interface ShockerSendControlDEPRECATEDRequest {
    control?: Array<Control>;
}

export interface ShockerShockerShareCodeCreateRequest {
    shockerId: string;
    shockerPermLimitPair?: ShockerPermLimitPair;
}

export interface ShockerShockerShareCodeListRequest {
    shockerId: string;
}

export interface ShockerShockerShareCodePauseRequest {
    shockerId: string;
    sharedWithUserId: string;
    pauseRequest?: PauseRequest;
}

export interface ShockerShockerShareCodeUpdateRequest {
    shockerId: string;
    sharedWithUserId: string;
    shockerPermLimitPair?: ShockerPermLimitPair;
}

export interface ShockerShockerShareRemoveRequest {
    shockerId: string;
    sharedWithUserId: string;
}

/**
 * ShockersApi - interface
 * 
 * @export
 * @interface ShockersApiInterface
 */
export interface ShockersApiInterface {
    /**
     * 
     * @summary Edit a shocker
     * @param {string} shockerId 
     * @param {NewShocker} [newShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerEditShockerRaw(requestParameters: ShockerEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Edit a shocker
     */
    shockerEditShocker(shockerId: string, newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Get information about a shocker.
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerGetShockerByIdRaw(requestParameters: ShockerGetShockerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerWithDeviceLegacyDataResponse>>;

    /**
     * Get information about a shocker.
     */
    shockerGetShockerById(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerWithDeviceLegacyDataResponse>;

    /**
     * 
     * @summary Get the logs for a shocker
     * @param {string} shockerId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerGetShockerLogsRaw(requestParameters: ShockerGetShockerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogEntryArrayLegacyDataResponse>>;

    /**
     * Get the logs for a shocker
     */
    shockerGetShockerLogs(shockerId: string, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogEntryArrayLegacyDataResponse>;

    /**
     * 
     * @summary Get all user shares for a shocker
     * @param {string} shockerId Id of the shocker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerGetUserSharesRaw(requestParameters: ShockerGetUserSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfoArrayLegacyDataResponse>>;

    /**
     * Get all user shares for a shocker
     */
    shockerGetUserShares(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfoArrayLegacyDataResponse>;

    /**
     * 
     * @summary List all shockers shared with the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerListSharedShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnerShockerResponseArrayLegacyDataResponse>>;

    /**
     * List all shockers shared with the authenticated user.
     */
    shockerListSharedShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnerShockerResponseArrayLegacyDataResponse>;

    /**
     * 
     * @summary List all shockers belonging to the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerListShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithShockersArrayLegacyDataResponse>>;

    /**
     * List all shockers belonging to the authenticated user.
     */
    shockerListShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithShockersArrayLegacyDataResponse>;

    /**
     * 
     * @summary Pause or unpause a shocker
     * @param {string} shockerId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerPauseShockerRaw(requestParameters: ShockerPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanLegacyDataResponse>>;

    /**
     * Pause or unpause a shocker
     */
    shockerPauseShocker(shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanLegacyDataResponse>;

    /**
     * 
     * @summary Register a shocker
     * @param {NewShocker} [newShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerRegisterShockerRaw(requestParameters: ShockerRegisterShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>>;

    /**
     * Register a shocker
     */
    shockerRegisterShocker(newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse>;

    /**
     * 
     * @summary Remove a shocker
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerRemoveShockerRaw(requestParameters: ShockerRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Remove a shocker
     */
    shockerRemoveShocker(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     * @param {Array<Control>} [control] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerSendControlDEPRECATEDRaw(requestParameters: ShockerSendControlDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    shockerSendControlDEPRECATED(control?: Array<Control>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Create a share code for a shocker
     * @param {string} shockerId 
     * @param {ShockerPermLimitPair} [shockerPermLimitPair] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerShockerShareCodeCreateRaw(requestParameters: ShockerShockerShareCodeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>>;

    /**
     * Create a share code for a shocker
     */
    shockerShockerShareCodeCreate(shockerId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse>;

    /**
     * 
     * @summary List all share codes for a shocker
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerShockerShareCodeListRaw(requestParameters: ShockerShockerShareCodeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeInfoArrayLegacyDataResponse>>;

    /**
     * List all share codes for a shocker
     */
    shockerShockerShareCodeList(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeInfoArrayLegacyDataResponse>;

    /**
     * 
     * @summary Pause/Unpause a share code for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerShockerShareCodePauseRaw(requestParameters: ShockerShockerShareCodePauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanLegacyDataResponse>>;

    /**
     * Pause/Unpause a share code for a shocker
     */
    shockerShockerShareCodePause(shockerId: string, sharedWithUserId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanLegacyDataResponse>;

    /**
     * 
     * @summary Update a share for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {ShockerPermLimitPair} [shockerPermLimitPair] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerShockerShareCodeUpdateRaw(requestParameters: ShockerShockerShareCodeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update a share for a shocker
     */
    shockerShockerShareCodeUpdate(shockerId: string, sharedWithUserId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove a share for a shocker
     * @param {string} shockerId 
     * @param {string} sharedWithUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShockersApiInterface
     */
    shockerShockerShareRemoveRaw(requestParameters: ShockerShockerShareRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove a share for a shocker
     */
    shockerShockerShareRemove(shockerId: string, sharedWithUserId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ShockersApi extends runtime.BaseAPI implements ShockersApiInterface {

    /**
     * Edit a shocker
     */
    async shockerEditShockerRaw(requestParameters: ShockerEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerEditShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NewShockerToJSON(requestParameters['newShocker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Edit a shocker
     */
    async shockerEditShocker(shockerId: string, newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shockerEditShockerRaw({ shockerId: shockerId, newShocker: newShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Get information about a shocker.
     */
    async shockerGetShockerByIdRaw(requestParameters: ShockerGetShockerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerWithDeviceLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetShockerById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShockerWithDeviceLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Get information about a shocker.
     */
    async shockerGetShockerById(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerWithDeviceLegacyDataResponse> {
        const response = await this.shockerGetShockerByIdRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Get the logs for a shocker
     */
    async shockerGetShockerLogsRaw(requestParameters: ShockerGetShockerLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogEntryArrayLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetShockerLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/logs`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogEntryArrayLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Get the logs for a shocker
     */
    async shockerGetShockerLogs(shockerId: string, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogEntryArrayLegacyDataResponse> {
        const response = await this.shockerGetShockerLogsRaw({ shockerId: shockerId, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Get all user shares for a shocker
     */
    async shockerGetUserSharesRaw(requestParameters: ShockerGetUserSharesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfoArrayLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerGetUserShares().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shares`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareInfoArrayLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Get all user shares for a shocker
     */
    async shockerGetUserShares(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfoArrayLegacyDataResponse> {
        const response = await this.shockerGetUserSharesRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * List all shockers shared with the authenticated user.
     */
    async shockerListSharedShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnerShockerResponseArrayLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/shared`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnerShockerResponseArrayLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * List all shockers shared with the authenticated user.
     */
    async shockerListSharedShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnerShockerResponseArrayLegacyDataResponse> {
        const response = await this.shockerListSharedShockersRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all shockers belonging to the authenticated user.
     */
    async shockerListShockersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithShockersArrayLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/own`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDeviceWithShockersArrayLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * List all shockers belonging to the authenticated user.
     */
    async shockerListShockers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithShockersArrayLegacyDataResponse> {
        const response = await this.shockerListShockersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause or unpause a shocker
     */
    async shockerPauseShockerRaw(requestParameters: ShockerPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerPauseShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/pause`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Pause or unpause a shocker
     */
    async shockerPauseShocker(shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanLegacyDataResponse> {
        const response = await this.shockerPauseShockerRaw({ shockerId: shockerId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Register a shocker
     */
    async shockerRegisterShockerRaw(requestParameters: ShockerRegisterShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewShockerToJSON(requestParameters['newShocker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Register a shocker
     */
    async shockerRegisterShocker(newShocker?: NewShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse> {
        const response = await this.shockerRegisterShockerRaw({ newShocker: newShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a shocker
     */
    async shockerRemoveShockerRaw(requestParameters: ShockerRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerRemoveShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Remove a shocker
     */
    async shockerRemoveShocker(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shockerRemoveShockerRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    async shockerSendControlDEPRECATEDRaw(requestParameters: ShockerSendControlDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/control`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['control']!.map(ControlToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Send a control message to shockers (Deprecated in favor of the /2/shockers/control endpoint)
     */
    async shockerSendControlDEPRECATED(control?: Array<Control>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.shockerSendControlDEPRECATEDRaw({ control: control }, initOverrides);
        return await response.value();
    }

    /**
     * Create a share code for a shocker
     */
    async shockerShockerShareCodeCreateRaw(requestParameters: ShockerShockerShareCodeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shares`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShockerPermLimitPairToJSON(requestParameters['shockerPermLimitPair']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Create a share code for a shocker
     */
    async shockerShockerShareCodeCreate(shockerId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidLegacyDataResponse> {
        const response = await this.shockerShockerShareCodeCreateRaw({ shockerId: shockerId, shockerPermLimitPair: shockerPermLimitPair }, initOverrides);
        return await response.value();
    }

    /**
     * List all share codes for a shocker
     */
    async shockerShockerShareCodeListRaw(requestParameters: ShockerShockerShareCodeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeInfoArrayLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shareCodes`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareCodeInfoArrayLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * List all share codes for a shocker
     */
    async shockerShockerShareCodeList(shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeInfoArrayLegacyDataResponse> {
        const response = await this.shockerShockerShareCodeListRaw({ shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Pause/Unpause a share code for a shocker
     */
    async shockerShockerShareCodePauseRaw(requestParameters: ShockerShockerShareCodePauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanLegacyDataResponse>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodePause().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareCodePause().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shares/{sharedWithUserId}/pause`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));
        urlPath = urlPath.replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Pause/Unpause a share code for a shocker
     */
    async shockerShockerShareCodePause(shockerId: string, sharedWithUserId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanLegacyDataResponse> {
        const response = await this.shockerShockerShareCodePauseRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update a share for a shocker
     */
    async shockerShockerShareCodeUpdateRaw(requestParameters: ShockerShockerShareCodeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareCodeUpdate().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareCodeUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shares/{sharedWithUserId}`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));
        urlPath = urlPath.replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShockerPermLimitPairToJSON(requestParameters['shockerPermLimitPair']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a share for a shocker
     */
    async shockerShockerShareCodeUpdate(shockerId: string, sharedWithUserId: string, shockerPermLimitPair?: ShockerPermLimitPair, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shockerShockerShareCodeUpdateRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId, shockerPermLimitPair: shockerPermLimitPair }, initOverrides);
    }

    /**
     * Remove a share for a shocker
     */
    async shockerShockerShareRemoveRaw(requestParameters: ShockerShockerShareRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shockerShockerShareRemove().'
            );
        }

        if (requestParameters['sharedWithUserId'] == null) {
            throw new runtime.RequiredError(
                'sharedWithUserId',
                'Required parameter "sharedWithUserId" was null or undefined when calling shockerShockerShareRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }


        let urlPath = `/1/shockers/{shockerId}/shares/{sharedWithUserId}`;
        urlPath = urlPath.replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId'])));
        urlPath = urlPath.replace(`{${"sharedWithUserId"}}`, encodeURIComponent(String(requestParameters['sharedWithUserId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a share for a shocker
     */
    async shockerShockerShareRemove(shockerId: string, sharedWithUserId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shockerShockerShareRemoveRaw({ shockerId: shockerId, sharedWithUserId: sharedWithUserId }, initOverrides);
    }

}

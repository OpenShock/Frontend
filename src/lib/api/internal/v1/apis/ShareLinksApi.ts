/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GuidBaseResponse,
  ObjectBaseResponse,
  OpenShockProblem,
  PauseReasonBaseResponse,
  PauseRequest,
  ShareLinkCreate,
  ShareLinkEditShocker,
  ShareLinkResponseBaseResponse,
  ShareLinkResponseIEnumerableBaseResponse,
} from '../models/index';
import {
    GuidBaseResponseFromJSON,
    GuidBaseResponseToJSON,
    ObjectBaseResponseFromJSON,
    ObjectBaseResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    PauseReasonBaseResponseFromJSON,
    PauseReasonBaseResponseToJSON,
    PauseRequestFromJSON,
    PauseRequestToJSON,
    ShareLinkCreateFromJSON,
    ShareLinkCreateToJSON,
    ShareLinkEditShockerFromJSON,
    ShareLinkEditShockerToJSON,
    ShareLinkResponseBaseResponseFromJSON,
    ShareLinkResponseBaseResponseToJSON,
    ShareLinkResponseIEnumerableBaseResponseFromJSON,
    ShareLinkResponseIEnumerableBaseResponseToJSON,
} from '../models/index';

export interface ShareLinksAddShockerRequest {
    shareLinkId: string;
    shockerId: string;
}

export interface ShareLinksCreateShareLinkRequest {
    shareLinkCreate?: ShareLinkCreate;
}

export interface ShareLinksDeleteShareLinkRequest {
    shareLinkId: string;
}

export interface ShareLinksEditShockerRequest {
    shareLinkId: string;
    shockerId: string;
    shareLinkEditShocker?: ShareLinkEditShocker;
}

export interface ShareLinksPauseShockerRequest {
    shareLinkId: string;
    shockerId: string;
    pauseRequest?: PauseRequest;
}

export interface ShareLinksRemoveShockerRequest {
    shareLinkId: string;
    shockerId: string;
}

/**
 * ShareLinksApi - interface
 * 
 * @export
 * @interface ShareLinksApiInterface
 */
export interface ShareLinksApiInterface {
    /**
     * 
     * @summary Add a shocker to a share link
     * @param {string} shareLinkId 
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksAddShockerRaw(requestParameters: ShareLinksAddShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Add a shocker to a share link
     */
    shareLinksAddShocker(shareLinkId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

    /**
     * 
     * @summary Create a new share link
     * @param {ShareLinkCreate} [shareLinkCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksCreateShareLinkRaw(requestParameters: ShareLinksCreateShareLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>>;

    /**
     * Create a new share link
     */
    shareLinksCreateShareLink(shareLinkCreate?: ShareLinkCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse>;

    /**
     * 
     * @summary Deletes a share link
     * @param {string} shareLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksDeleteShareLinkRaw(requestParameters: ShareLinksDeleteShareLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Deletes a share link
     */
    shareLinksDeleteShareLink(shareLinkId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

    /**
     * 
     * @summary Edit a shocker in a share link
     * @param {string} shareLinkId 
     * @param {string} shockerId 
     * @param {ShareLinkEditShocker} [shareLinkEditShocker] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksEditShockerRaw(requestParameters: ShareLinksEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareLinkResponseBaseResponse>>;

    /**
     * Edit a shocker in a share link
     */
    shareLinksEditShocker(shareLinkId: string, shockerId: string, shareLinkEditShocker?: ShareLinkEditShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareLinkResponseBaseResponse>;

    /**
     * 
     * @summary Get all share links for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareLinkResponseIEnumerableBaseResponse>>;

    /**
     * Get all share links for the current user
     */
    shareLinksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareLinkResponseIEnumerableBaseResponse>;

    /**
     * 
     * @summary Pause a shocker in a share link
     * @param {string} shareLinkId 
     * @param {string} shockerId 
     * @param {PauseRequest} [pauseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksPauseShockerRaw(requestParameters: ShareLinksPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseReasonBaseResponse>>;

    /**
     * Pause a shocker in a share link
     */
    shareLinksPauseShocker(shareLinkId: string, shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseReasonBaseResponse>;

    /**
     * 
     * @summary Remove a shocker from a share link
     * @param {string} shareLinkId 
     * @param {string} shockerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareLinksApiInterface
     */
    shareLinksRemoveShockerRaw(requestParameters: ShareLinksRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>>;

    /**
     * Remove a shocker from a share link
     */
    shareLinksRemoveShocker(shareLinkId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse>;

}

/**
 * 
 */
export class ShareLinksApi extends runtime.BaseAPI implements ShareLinksApiInterface {

    /**
     * Add a shocker to a share link
     */
    async shareLinksAddShockerRaw(requestParameters: ShareLinksAddShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        if (requestParameters['shareLinkId'] == null) {
            throw new runtime.RequiredError(
                'shareLinkId',
                'Required parameter "shareLinkId" was null or undefined when calling shareLinksAddShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksAddShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links/{shareLinkId}/{shockerId}`.replace(`{${"shareLinkId"}}`, encodeURIComponent(String(requestParameters['shareLinkId']))).replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Add a shocker to a share link
     */
    async shareLinksAddShocker(shareLinkId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shareLinksAddShockerRaw({ shareLinkId: shareLinkId, shockerId: shockerId }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new share link
     */
    async shareLinksCreateShareLinkRaw(requestParameters: ShareLinksCreateShareLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareLinkCreateToJSON(requestParameters['shareLinkCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidBaseResponseFromJSON(jsonValue));
    }

    /**
     * Create a new share link
     */
    async shareLinksCreateShareLink(shareLinkCreate?: ShareLinkCreate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidBaseResponse> {
        const response = await this.shareLinksCreateShareLinkRaw({ shareLinkCreate: shareLinkCreate }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a share link
     */
    async shareLinksDeleteShareLinkRaw(requestParameters: ShareLinksDeleteShareLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        if (requestParameters['shareLinkId'] == null) {
            throw new runtime.RequiredError(
                'shareLinkId',
                'Required parameter "shareLinkId" was null or undefined when calling shareLinksDeleteShareLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links/{shareLinkId}`.replace(`{${"shareLinkId"}}`, encodeURIComponent(String(requestParameters['shareLinkId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a share link
     */
    async shareLinksDeleteShareLink(shareLinkId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shareLinksDeleteShareLinkRaw({ shareLinkId: shareLinkId }, initOverrides);
        return await response.value();
    }

    /**
     * Edit a shocker in a share link
     */
    async shareLinksEditShockerRaw(requestParameters: ShareLinksEditShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareLinkResponseBaseResponse>> {
        if (requestParameters['shareLinkId'] == null) {
            throw new runtime.RequiredError(
                'shareLinkId',
                'Required parameter "shareLinkId" was null or undefined when calling shareLinksEditShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksEditShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links/{shareLinkId}/{shockerId}`.replace(`{${"shareLinkId"}}`, encodeURIComponent(String(requestParameters['shareLinkId']))).replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShareLinkEditShockerToJSON(requestParameters['shareLinkEditShocker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareLinkResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     * Edit a shocker in a share link
     */
    async shareLinksEditShocker(shareLinkId: string, shockerId: string, shareLinkEditShocker?: ShareLinkEditShocker, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareLinkResponseBaseResponse> {
        const response = await this.shareLinksEditShockerRaw({ shareLinkId: shareLinkId, shockerId: shockerId, shareLinkEditShocker: shareLinkEditShocker }, initOverrides);
        return await response.value();
    }

    /**
     * Get all share links for the current user
     */
    async shareLinksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareLinkResponseIEnumerableBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareLinkResponseIEnumerableBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get all share links for the current user
     */
    async shareLinksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareLinkResponseIEnumerableBaseResponse> {
        const response = await this.shareLinksListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause a shocker in a share link
     */
    async shareLinksPauseShockerRaw(requestParameters: ShareLinksPauseShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseReasonBaseResponse>> {
        if (requestParameters['shareLinkId'] == null) {
            throw new runtime.RequiredError(
                'shareLinkId',
                'Required parameter "shareLinkId" was null or undefined when calling shareLinksPauseShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksPauseShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links/{shareLinkId}/{shockerId}/pause`.replace(`{${"shareLinkId"}}`, encodeURIComponent(String(requestParameters['shareLinkId']))).replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseRequestToJSON(requestParameters['pauseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PauseReasonBaseResponseFromJSON(jsonValue));
    }

    /**
     * Pause a shocker in a share link
     */
    async shareLinksPauseShocker(shareLinkId: string, shockerId: string, pauseRequest?: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseReasonBaseResponse> {
        const response = await this.shareLinksPauseShockerRaw({ shareLinkId: shareLinkId, shockerId: shockerId, pauseRequest: pauseRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a shocker from a share link
     */
    async shareLinksRemoveShockerRaw(requestParameters: ShareLinksRemoveShockerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectBaseResponse>> {
        if (requestParameters['shareLinkId'] == null) {
            throw new runtime.RequiredError(
                'shareLinkId',
                'Required parameter "shareLinkId" was null or undefined when calling shareLinksRemoveShocker().'
            );
        }

        if (requestParameters['shockerId'] == null) {
            throw new runtime.RequiredError(
                'shockerId',
                'Required parameter "shockerId" was null or undefined when calling shareLinksRemoveShocker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/shares/links/{shareLinkId}/{shockerId}`.replace(`{${"shareLinkId"}}`, encodeURIComponent(String(requestParameters['shareLinkId']))).replace(`{${"shockerId"}}`, encodeURIComponent(String(requestParameters['shockerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectBaseResponseFromJSON(jsonValue));
    }

    /**
     * Remove a shocker from a share link
     */
    async shareLinksRemoveShocker(shareLinkId: string, shockerId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectBaseResponse> {
        const response = await this.shareLinksRemoveShockerRaw({ shareLinkId: shareLinkId, shockerId: shockerId }, initOverrides);
        return await response.value();
    }

}

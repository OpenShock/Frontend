/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeviceSelfResponseLegacyDataResponse,
  LcgNodeResponseLegacyDataResponse,
  OpenShockProblem,
  StringLegacyDataResponse,
} from '../models/index';
import {
    DeviceSelfResponseLegacyDataResponseFromJSON,
    DeviceSelfResponseLegacyDataResponseToJSON,
    LcgNodeResponseLegacyDataResponseFromJSON,
    LcgNodeResponseLegacyDataResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    StringLegacyDataResponseFromJSON,
    StringLegacyDataResponseToJSON,
} from '../models/index';

export interface DevicePairRequest {
    pairCode: string;
}

export interface DevicePairDEPRECATEDRequest {
    pairCode: string;
}

/**
 * HubEndpointsApi - interface
 * 
 * @export
 * @interface HubEndpointsApiInterface
 */
export interface HubEndpointsApiInterface {
    /**
     * 
     * @summary Gets the best suited LCG node for the client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEndpointsApiInterface
     */
    deviceGetLiveControlGatewayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgNodeResponseLegacyDataResponse>>;

    /**
     * Gets the best suited LCG node for the client
     */
    deviceGetLiveControlGateway(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgNodeResponseLegacyDataResponse>;

    /**
     * 
     * @summary Gets information about the authenticated device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEndpointsApiInterface
     */
    deviceGetSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceSelfResponseLegacyDataResponse>>;

    /**
     * Gets information about the authenticated device.
     */
    deviceGetSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceSelfResponseLegacyDataResponse>;

    /**
     * 
     * @summary Pair a device with a pair code.
     * @param {string} pairCode The pair code to pair with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEndpointsApiInterface
     */
    devicePairRaw(requestParameters: DevicePairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringLegacyDataResponse>>;

    /**
     * Pair a device with a pair code.
     */
    devicePair(pairCode: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringLegacyDataResponse>;

    /**
     * 
     * @summary Pair a device with a pair code.
     * @param {string} pairCode The pair code to pair with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEndpointsApiInterface
     */
    devicePairDEPRECATEDRaw(requestParameters: DevicePairDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringLegacyDataResponse>>;

    /**
     * Pair a device with a pair code.
     */
    devicePairDEPRECATED(pairCode: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringLegacyDataResponse>;

}

/**
 * 
 */
export class HubEndpointsApi extends runtime.BaseAPI implements HubEndpointsApiInterface {

    /**
     * Gets the best suited LCG node for the client
     */
    async deviceGetLiveControlGatewayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgNodeResponseLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceToken"] = await this.configuration.apiKey("DeviceToken"); // HubToken authentication
        }


        let urlPath = `/1/device/assignLCG`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LcgNodeResponseLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Gets the best suited LCG node for the client
     */
    async deviceGetLiveControlGateway(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgNodeResponseLegacyDataResponse> {
        const response = await this.deviceGetLiveControlGatewayRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets information about the authenticated device.
     */
    async deviceGetSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceSelfResponseLegacyDataResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceToken"] = await this.configuration.apiKey("DeviceToken"); // HubToken authentication
        }


        let urlPath = `/1/device/self`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceSelfResponseLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about the authenticated device.
     */
    async deviceGetSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceSelfResponseLegacyDataResponse> {
        const response = await this.deviceGetSelfRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pair a device with a pair code.
     */
    async devicePairRaw(requestParameters: DevicePairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringLegacyDataResponse>> {
        if (requestParameters['pairCode'] == null) {
            throw new runtime.RequiredError(
                'pairCode',
                'Required parameter "pairCode" was null or undefined when calling devicePair().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceToken"] = await this.configuration.apiKey("DeviceToken"); // HubToken authentication
        }


        let urlPath = `/1/device/pair/{pairCode}`;
        urlPath = urlPath.replace(`{${"pairCode"}}`, encodeURIComponent(String(requestParameters['pairCode'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Pair a device with a pair code.
     */
    async devicePair(pairCode: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringLegacyDataResponse> {
        const response = await this.devicePairRaw({ pairCode: pairCode }, initOverrides);
        return await response.value();
    }

    /**
     * Pair a device with a pair code.
     */
    async devicePairDEPRECATEDRaw(requestParameters: DevicePairDEPRECATEDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringLegacyDataResponse>> {
        if (requestParameters['pairCode'] == null) {
            throw new runtime.RequiredError(
                'pairCode',
                'Required parameter "pairCode" was null or undefined when calling devicePairDEPRECATED().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceToken"] = await this.configuration.apiKey("DeviceToken"); // HubToken authentication
        }


        let urlPath = `/1/pair/{pairCode}`;
        urlPath = urlPath.replace(`{${"pairCode"}}`, encodeURIComponent(String(requestParameters['pairCode'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringLegacyDataResponseFromJSON(jsonValue));
    }

    /**
     * Pair a device with a pair code.
     */
    async devicePairDEPRECATED(pairCode: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringLegacyDataResponse> {
        const response = await this.devicePairDEPRECATEDRaw({ pairCode: pairCode }, initOverrides);
        return await response.value();
    }

}

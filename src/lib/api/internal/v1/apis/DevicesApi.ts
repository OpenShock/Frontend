/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HubEditRequest,
  LcgResponseBaseResponse,
  OpenShockProblem,
  ResponseDeviceArrayBaseResponse,
  ResponseDeviceWithTokenBaseResponse,
  ShockerResponseArrayBaseResponse,
  StringBaseResponse,
} from '../models/index';
import {
    HubEditRequestFromJSON,
    HubEditRequestToJSON,
    LcgResponseBaseResponseFromJSON,
    LcgResponseBaseResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    ResponseDeviceArrayBaseResponseFromJSON,
    ResponseDeviceArrayBaseResponseToJSON,
    ResponseDeviceWithTokenBaseResponseFromJSON,
    ResponseDeviceWithTokenBaseResponseToJSON,
    ShockerResponseArrayBaseResponseFromJSON,
    ShockerResponseArrayBaseResponseToJSON,
    StringBaseResponseFromJSON,
    StringBaseResponseToJSON,
} from '../models/index';

export interface DevicesEditDeviceRequest {
    deviceId: string;
    hubEditRequest?: HubEditRequest;
}

export interface DevicesGetDeviceByIdRequest {
    deviceId: string;
}

export interface DevicesGetLiveControlGatewayInfoRequest {
    deviceId: string;
}

export interface DevicesGetPairCodeRequest {
    deviceId: string;
}

export interface DevicesGetShockersRequest {
    deviceId: string;
}

export interface DevicesRegenerateDeviceTokenRequest {
    deviceId: string;
}

export interface DevicesRemoveDeviceRequest {
    deviceId: string;
}

/**
 * DevicesApi - interface
 * 
 * @export
 * @interface DevicesApiInterface
 */
export interface DevicesApiInterface {
    /**
     * 
     * @summary Create a new device for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCreateDeviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Create a new device for the current user
     */
    devicesCreateDevice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Edit a device
     * @param {string} deviceId 
     * @param {HubEditRequest} [hubEditRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesEditDeviceRaw(requestParameters: DevicesEditDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Edit a device
     */
    devicesEditDevice(deviceId: string, hubEditRequest?: HubEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a device by its id
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesGetDeviceByIdRaw(requestParameters: DevicesGetDeviceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithTokenBaseResponse>>;

    /**
     * Get a device by its id
     */
    devicesGetDeviceById(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithTokenBaseResponse>;

    /**
     * 
     * @summary Get LCG info for a device if it is online and connected to a LCG node
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesGetLiveControlGatewayInfoRaw(requestParameters: DevicesGetLiveControlGatewayInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgResponseBaseResponse>>;

    /**
     * Get LCG info for a device if it is online and connected to a LCG node
     */
    devicesGetLiveControlGatewayInfo(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgResponseBaseResponse>;

    /**
     * 
     * @summary Get a pair code for a device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesGetPairCodeRaw(requestParameters: DevicesGetPairCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponse>>;

    /**
     * Get a pair code for a device
     */
    devicesGetPairCode(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponse>;

    /**
     * 
     * @summary Get all shockers for a device
     * @param {string} deviceId The device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesGetShockersRaw(requestParameters: DevicesGetShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerResponseArrayBaseResponse>>;

    /**
     * Get all shockers for a device
     */
    devicesGetShockers(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerResponseArrayBaseResponse>;

    /**
     * 
     * @summary Get all devices for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesListDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceArrayBaseResponse>>;

    /**
     * Get all devices for the current user
     */
    devicesListDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceArrayBaseResponse>;

    /**
     * 
     * @summary Regenerate a device token
     * @param {string} deviceId The id of the device to regenerate the token for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesRegenerateDeviceTokenRaw(requestParameters: DevicesRegenerateDeviceTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Regenerate a device token
     */
    devicesRegenerateDeviceToken(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove a device from current user\'s account
     * @param {string} deviceId The id of the device to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesRemoveDeviceRaw(requestParameters: DevicesRemoveDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove a device from current user\'s account
     */
    devicesRemoveDevice(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI implements DevicesApiInterface {

    /**
     * Create a new device for the current user
     */
    async devicesCreateDeviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new device for the current user
     */
    async devicesCreateDevice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.devicesCreateDeviceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Edit a device
     */
    async devicesEditDeviceRaw(requestParameters: DevicesEditDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesEditDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: HubEditRequestToJSON(requestParameters['hubEditRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit a device
     */
    async devicesEditDevice(deviceId: string, hubEditRequest?: HubEditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.devicesEditDeviceRaw({ deviceId: deviceId, hubEditRequest: hubEditRequest }, initOverrides);
    }

    /**
     * Get a device by its id
     */
    async devicesGetDeviceByIdRaw(requestParameters: DevicesGetDeviceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceWithTokenBaseResponse>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesGetDeviceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDeviceWithTokenBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get a device by its id
     */
    async devicesGetDeviceById(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceWithTokenBaseResponse> {
        const response = await this.devicesGetDeviceByIdRaw({ deviceId: deviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Get LCG info for a device if it is online and connected to a LCG node
     */
    async devicesGetLiveControlGatewayInfoRaw(requestParameters: DevicesGetLiveControlGatewayInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgResponseBaseResponse>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesGetLiveControlGatewayInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}/lcg`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LcgResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get LCG info for a device if it is online and connected to a LCG node
     */
    async devicesGetLiveControlGatewayInfo(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgResponseBaseResponse> {
        const response = await this.devicesGetLiveControlGatewayInfoRaw({ deviceId: deviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a pair code for a device
     */
    async devicesGetPairCodeRaw(requestParameters: DevicesGetPairCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringBaseResponse>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesGetPairCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}/pair`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get a pair code for a device
     */
    async devicesGetPairCode(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringBaseResponse> {
        const response = await this.devicesGetPairCodeRaw({ deviceId: deviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Get all shockers for a device
     */
    async devicesGetShockersRaw(requestParameters: DevicesGetShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShockerResponseArrayBaseResponse>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesGetShockers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}/shockers`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShockerResponseArrayBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get all shockers for a device
     */
    async devicesGetShockers(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShockerResponseArrayBaseResponse> {
        const response = await this.devicesGetShockersRaw({ deviceId: deviceId }, initOverrides);
        return await response.value();
    }

    /**
     * Get all devices for the current user
     */
    async devicesListDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeviceArrayBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDeviceArrayBaseResponseFromJSON(jsonValue));
    }

    /**
     * Get all devices for the current user
     */
    async devicesListDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeviceArrayBaseResponse> {
        const response = await this.devicesListDevicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Regenerate a device token
     */
    async devicesRegenerateDeviceTokenRaw(requestParameters: DevicesRegenerateDeviceTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesRegenerateDeviceToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Regenerate a device token
     */
    async devicesRegenerateDeviceToken(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.devicesRegenerateDeviceTokenRaw({ deviceId: deviceId }, initOverrides);
    }

    /**
     * Remove a device from current user\'s account
     */
    async devicesRemoveDeviceRaw(requestParameters: DevicesRemoveDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesRemoveDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // ApiToken authentication
        }

        const response = await this.request({
            path: `/1/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a device from current user\'s account
     */
    async devicesRemoveDevice(deviceId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.devicesRemoveDeviceRaw({ deviceId: deviceId }, initOverrides);
    }

}

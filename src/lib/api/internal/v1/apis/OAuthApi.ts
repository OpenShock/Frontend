/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginV2OkResponse,
  OAuthFinalizeRequest,
  OAuthSignupDataResponse,
  OpenShockProblem,
} from '../models/index';
import {
    LoginV2OkResponseFromJSON,
    LoginV2OkResponseToJSON,
    OAuthFinalizeRequestFromJSON,
    OAuthFinalizeRequestToJSON,
    OAuthSignupDataResponseFromJSON,
    OAuthSignupDataResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
} from '../models/index';

export interface OAuthOAuthAuthorizeRequest {
    provider: string;
}

export interface OAuthOAuthHandOffRequest {
    provider: string;
}

export interface OAuthOAuthSignupFinalizeRequest {
    provider: string;
    oAuthFinalizeRequest?: OAuthFinalizeRequest;
}

export interface OAuthOAuthSignupGetDataRequest {
    provider: string;
}

/**
 * OAuthApi - interface
 * 
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
    /**
     * Returns the set of provider keys that are configured and available for use.
     * @summary Get the list of supported OAuth providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthListOAuthProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    oAuthListOAuthProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Initiates an OAuth challenge in \"login-or-create\" mode.   Returns `302` redirect to the provider authorization page.
     * @summary Start OAuth authorization for a given provider (login-or-create flow).
     * @param {string} provider Provider key (e.g. &#x60;discord&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthOAuthAuthorizeRaw(requestParameters: OAuthOAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Initiates an OAuth challenge in \"login-or-create\" mode.   Returns `302` redirect to the provider authorization page.
     * Start OAuth authorization for a given provider (login-or-create flow).
     */
    oAuthOAuthAuthorize(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Reads the temp OAuth flow principal (flow cookie set by middleware). If a matching connection exists -> signs in and redirects home. Otherwise -> redirects frontend to continue the chosen flow.
     * @summary Handoff after provider callback. Decides next step (create, link, or direct sign-in).
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthOAuthHandOffRaw(requestParameters: OAuthOAuthHandOffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Reads the temp OAuth flow principal (flow cookie set by middleware). If a matching connection exists -> signs in and redirects home. Otherwise -> redirects frontend to continue the chosen flow.
     * Handoff after provider callback. Decides next step (create, link, or direct sign-in).
     */
    oAuthOAuthHandOff(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Authenticates via the temporary OAuth flow cookie (set during the provider callback). Sets the regular session cookie on success. No access/refresh tokens are returned.
     * @summary Finalize an OAuth flow by creating a new account with the external identity.
     * @param {string} provider Provider key (e.g. &#x60;discord&#x60;).
     * @param {OAuthFinalizeRequest} [oAuthFinalizeRequest] Request body containing optional &#x60;Email&#x60; and &#x60;Username&#x60; overrides.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthOAuthSignupFinalizeRaw(requestParameters: OAuthOAuthSignupFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginV2OkResponse>>;

    /**
     * Authenticates via the temporary OAuth flow cookie (set during the provider callback). Sets the regular session cookie on success. No access/refresh tokens are returned.
     * Finalize an OAuth flow by creating a new account with the external identity.
     */
    oAuthOAuthSignupFinalize(provider: string, oAuthFinalizeRequest?: OAuthFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginV2OkResponse>;

    /**
     * Returns basic identity information from the external provider (e.g., email, display name) together with the expiration time of the current flow. Access to this endpoint requires the temporary OAuth flow cookie and is restricted to the user who initiated the flow.
     * @summary Provides temporary OAuth handoff details for the active signup flow.
     * @param {string} provider The provider key (e.g. &#x60;discord&#x60;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthOAuthSignupGetDataRaw(requestParameters: OAuthOAuthSignupGetDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthSignupDataResponse>>;

    /**
     * Returns basic identity information from the external provider (e.g., email, display name) together with the expiration time of the current flow. Access to this endpoint requires the temporary OAuth flow cookie and is restricted to the user who initiated the flow.
     * Provides temporary OAuth handoff details for the active signup flow.
     */
    oAuthOAuthSignupGetData(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthSignupDataResponse>;

}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    async oAuthListOAuthProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/oauth/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    async oAuthListOAuthProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.oAuthListOAuthProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Initiates an OAuth challenge in \"login-or-create\" mode.   Returns `302` redirect to the provider authorization page.
     * Start OAuth authorization for a given provider (login-or-create flow).
     */
    async oAuthOAuthAuthorizeRaw(requestParameters: OAuthOAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oAuthOAuthAuthorize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/oauth/{provider}/authorize`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiates an OAuth challenge in \"login-or-create\" mode.   Returns `302` redirect to the provider authorization page.
     * Start OAuth authorization for a given provider (login-or-create flow).
     */
    async oAuthOAuthAuthorize(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oAuthOAuthAuthorizeRaw({ provider: provider }, initOverrides);
    }

    /**
     * Reads the temp OAuth flow principal (flow cookie set by middleware). If a matching connection exists -> signs in and redirects home. Otherwise -> redirects frontend to continue the chosen flow.
     * Handoff after provider callback. Decides next step (create, link, or direct sign-in).
     */
    async oAuthOAuthHandOffRaw(requestParameters: OAuthOAuthHandOffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oAuthOAuthHandOff().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/oauth/{provider}/handoff`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reads the temp OAuth flow principal (flow cookie set by middleware). If a matching connection exists -> signs in and redirects home. Otherwise -> redirects frontend to continue the chosen flow.
     * Handoff after provider callback. Decides next step (create, link, or direct sign-in).
     */
    async oAuthOAuthHandOff(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oAuthOAuthHandOffRaw({ provider: provider }, initOverrides);
    }

    /**
     * Authenticates via the temporary OAuth flow cookie (set during the provider callback). Sets the regular session cookie on success. No access/refresh tokens are returned.
     * Finalize an OAuth flow by creating a new account with the external identity.
     */
    async oAuthOAuthSignupFinalizeRaw(requestParameters: OAuthOAuthSignupFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginV2OkResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oAuthOAuthSignupFinalize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/1/oauth/{provider}/signup-finalize`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthFinalizeRequestToJSON(requestParameters['oAuthFinalizeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginV2OkResponseFromJSON(jsonValue));
    }

    /**
     * Authenticates via the temporary OAuth flow cookie (set during the provider callback). Sets the regular session cookie on success. No access/refresh tokens are returned.
     * Finalize an OAuth flow by creating a new account with the external identity.
     */
    async oAuthOAuthSignupFinalize(provider: string, oAuthFinalizeRequest?: OAuthFinalizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginV2OkResponse> {
        const response = await this.oAuthOAuthSignupFinalizeRaw({ provider: provider, oAuthFinalizeRequest: oAuthFinalizeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns basic identity information from the external provider (e.g., email, display name) together with the expiration time of the current flow. Access to this endpoint requires the temporary OAuth flow cookie and is restricted to the user who initiated the flow.
     * Provides temporary OAuth handoff details for the active signup flow.
     */
    async oAuthOAuthSignupGetDataRaw(requestParameters: OAuthOAuthSignupGetDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthSignupDataResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling oAuthOAuthSignupGetData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/oauth/{provider}/signup-data`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthSignupDataResponseFromJSON(jsonValue));
    }

    /**
     * Returns basic identity information from the external provider (e.g., email, display name) together with the expiration time of the current flow. Access to this endpoint requires the temporary OAuth flow cookie and is restricted to the user who initiated the flow.
     * Provides temporary OAuth handoff details for the active signup flow.
     */
    async oAuthOAuthSignupGetData(provider: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthSignupDataResponse> {
        const response = await this.oAuthOAuthSignupGetDataRaw({ provider: provider }, initOverrides);
        return await response.value();
    }

}

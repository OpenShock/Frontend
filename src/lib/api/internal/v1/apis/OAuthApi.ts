/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * OAuthApi - interface
 * 
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
    /**
     * Returns the set of provider keys that are configured and available for use.
     * @summary Get the list of supported OAuth providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthListOAuthProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    oAuthListOAuthProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    async oAuthListOAuthProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/1/oauth/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the set of provider keys that are configured and available for use.
     * Get the list of supported OAuth providers.
     */
    async oAuthListOAuthProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.oAuthListOAuthProvidersRaw(initOverrides);
        return await response.value();
    }

}

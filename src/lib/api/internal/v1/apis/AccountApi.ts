/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeEmailRequest,
  ChangePasswordRequest,
  ChangeUsernameRequest,
  LegacyEmptyResponse,
  Login,
  OpenShockProblem,
  PasswordResetProcessData,
  ResetRequest,
  SignUp,
  UsernameCheckResponse,
} from '../models/index';
import {
    ChangeEmailRequestFromJSON,
    ChangeEmailRequestToJSON,
    ChangePasswordRequestFromJSON,
    ChangePasswordRequestToJSON,
    ChangeUsernameRequestFromJSON,
    ChangeUsernameRequestToJSON,
    LegacyEmptyResponseFromJSON,
    LegacyEmptyResponseToJSON,
    LoginFromJSON,
    LoginToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    PasswordResetProcessDataFromJSON,
    PasswordResetProcessDataToJSON,
    ResetRequestFromJSON,
    ResetRequestToJSON,
    SignUpFromJSON,
    SignUpToJSON,
    UsernameCheckResponseFromJSON,
    UsernameCheckResponseToJSON,
} from '../models/index';

export interface AccountCheckUsernameRequest {
    changeUsernameRequest?: ChangeUsernameRequest;
}

export interface AccountLoginRequest {
    login?: Login;
}

export interface AccountPasswordResetCheckValidRequest {
    passwordResetId: string;
    secret: string;
}

export interface AccountPasswordResetCompleteRequest {
    passwordResetId: string;
    secret: string;
    passwordResetProcessData?: PasswordResetProcessData;
}

export interface AccountPasswordResetInitiateRequest {
    resetRequest?: ResetRequest;
}

export interface AccountSignUpRequest {
    signUp?: SignUp;
}

export interface AuthenticatedAccountChangeEmailRequest {
    changeEmailRequest?: ChangeEmailRequest;
}

export interface AuthenticatedAccountChangePasswordRequest {
    changePasswordRequest?: ChangePasswordRequest;
}

export interface AuthenticatedAccountChangeUsernameRequest {
    changeUsernameRequest?: ChangeUsernameRequest;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Check if a username is available
     * @param {ChangeUsernameRequest} [changeUsernameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountCheckUsernameRaw(requestParameters: AccountCheckUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameCheckResponse>>;

    /**
     * Check if a username is available
     */
    accountCheckUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameCheckResponse>;

    /**
     * 
     * @summary Authenticate a user
     * @param {Login} [login] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountLoginRaw(requestParameters: AccountLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Authenticate a user
     */
    accountLogin(login?: Login, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    accountLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Check if a password reset is in progress
     * @param {string} passwordResetId The id of the password reset
     * @param {string} secret The secret of the password reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountPasswordResetCheckValidRaw(requestParameters: AccountPasswordResetCheckValidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Check if a password reset is in progress
     */
    accountPasswordResetCheckValid(passwordResetId: string, secret: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Complete a password reset process
     * @param {string} passwordResetId The id of the password reset
     * @param {string} secret The secret of the password reset
     * @param {PasswordResetProcessData} [passwordResetProcessData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountPasswordResetCompleteRaw(requestParameters: AccountPasswordResetCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Complete a password reset process
     */
    accountPasswordResetComplete(passwordResetId: string, secret: string, passwordResetProcessData?: PasswordResetProcessData, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Initiate a password reset
     * @param {ResetRequest} [resetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountPasswordResetInitiateRaw(requestParameters: AccountPasswordResetInitiateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Initiate a password reset
     */
    accountPasswordResetInitiate(resetRequest?: ResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Signs up a new user
     * @param {SignUp} [signUp] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountSignUpRaw(requestParameters: AccountSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Signs up a new user
     */
    accountSignUp(signUp?: SignUp, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Change the password of the current user
     * @param {ChangeEmailRequest} [changeEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    authenticatedAccountChangeEmailRaw(requestParameters: AuthenticatedAccountChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Change the password of the current user
     */
    authenticatedAccountChangeEmail(changeEmailRequest?: ChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

    /**
     * 
     * @summary Change the password of the current user
     * @param {ChangePasswordRequest} [changePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    authenticatedAccountChangePasswordRaw(requestParameters: AuthenticatedAccountChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Change the password of the current user
     */
    authenticatedAccountChangePassword(changePasswordRequest?: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Change the username of the current user
     * @param {ChangeUsernameRequest} [changeUsernameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    authenticatedAccountChangeUsernameRaw(requestParameters: AuthenticatedAccountChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Change the username of the current user
     */
    authenticatedAccountChangeUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Deactivate currently logged in account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    authenticatedAccountDeactivateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Deactivate currently logged in account
     */
    authenticatedAccountDeactivate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Check if a username is available
     */
    async accountCheckUsernameRaw(requestParameters: AccountCheckUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/username/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUsernameRequestToJSON(requestParameters['changeUsernameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsernameCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check if a username is available
     */
    async accountCheckUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameCheckResponse> {
        const response = await this.accountCheckUsernameRaw({ changeUsernameRequest: changeUsernameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate a user
     */
    async accountLoginRaw(requestParameters: AccountLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters['login']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user
     */
    async accountLogin(login?: Login, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountLoginRaw({ login: login }, initOverrides);
        return await response.value();
    }

    /**
     */
    async accountLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/1/account/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountLogoutRaw(initOverrides);
    }

    /**
     * Check if a password reset is in progress
     */
    async accountPasswordResetCheckValidRaw(requestParameters: AccountPasswordResetCheckValidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['passwordResetId'] == null) {
            throw new runtime.RequiredError(
                'passwordResetId',
                'Required parameter "passwordResetId" was null or undefined when calling accountPasswordResetCheckValid().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling accountPasswordResetCheckValid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/1/account/recover/{passwordResetId}/{secret}`.replace(`{${"passwordResetId"}}`, encodeURIComponent(String(requestParameters['passwordResetId']))).replace(`{${"secret"}}`, encodeURIComponent(String(requestParameters['secret']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Check if a password reset is in progress
     */
    async accountPasswordResetCheckValid(passwordResetId: string, secret: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountPasswordResetCheckValidRaw({ passwordResetId: passwordResetId, secret: secret }, initOverrides);
        return await response.value();
    }

    /**
     * Complete a password reset process
     */
    async accountPasswordResetCompleteRaw(requestParameters: AccountPasswordResetCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        if (requestParameters['passwordResetId'] == null) {
            throw new runtime.RequiredError(
                'passwordResetId',
                'Required parameter "passwordResetId" was null or undefined when calling accountPasswordResetComplete().'
            );
        }

        if (requestParameters['secret'] == null) {
            throw new runtime.RequiredError(
                'secret',
                'Required parameter "secret" was null or undefined when calling accountPasswordResetComplete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/recover/{passwordResetId}/{secret}`.replace(`{${"passwordResetId"}}`, encodeURIComponent(String(requestParameters['passwordResetId']))).replace(`{${"secret"}}`, encodeURIComponent(String(requestParameters['secret']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetProcessDataToJSON(requestParameters['passwordResetProcessData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Complete a password reset process
     */
    async accountPasswordResetComplete(passwordResetId: string, secret: string, passwordResetProcessData?: PasswordResetProcessData, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountPasswordResetCompleteRaw({ passwordResetId: passwordResetId, secret: secret, passwordResetProcessData: passwordResetProcessData }, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a password reset
     */
    async accountPasswordResetInitiateRaw(requestParameters: AccountPasswordResetInitiateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetRequestToJSON(requestParameters['resetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a password reset
     */
    async accountPasswordResetInitiate(resetRequest?: ResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountPasswordResetInitiateRaw({ resetRequest: resetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Signs up a new user
     */
    async accountSignUpRaw(requestParameters: AccountSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpToJSON(requestParameters['signUp']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Signs up a new user
     */
    async accountSignUp(signUp?: SignUp, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountSignUpRaw({ signUp: signUp }, initOverrides);
        return await response.value();
    }

    /**
     * Change the password of the current user
     */
    async authenticatedAccountChangeEmailRaw(requestParameters: AuthenticatedAccountChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeEmailRequestToJSON(requestParameters['changeEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Change the password of the current user
     */
    async authenticatedAccountChangeEmail(changeEmailRequest?: ChangeEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.authenticatedAccountChangeEmailRaw({ changeEmailRequest: changeEmailRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Change the password of the current user
     */
    async authenticatedAccountChangePasswordRaw(requestParameters: AuthenticatedAccountChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordRequestToJSON(requestParameters['changePasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the password of the current user
     */
    async authenticatedAccountChangePassword(changePasswordRequest?: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticatedAccountChangePasswordRaw({ changePasswordRequest: changePasswordRequest }, initOverrides);
    }

    /**
     * Change the username of the current user
     */
    async authenticatedAccountChangeUsernameRaw(requestParameters: AuthenticatedAccountChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/1/account/username`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUsernameRequestToJSON(requestParameters['changeUsernameRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change the username of the current user
     */
    async authenticatedAccountChangeUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticatedAccountChangeUsernameRaw({ changeUsernameRequest: changeUsernameRequest }, initOverrides);
    }

    /**
     * Deactivate currently logged in account
     */
    async authenticatedAccountDeactivateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/1/account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deactivate currently logged in account
     */
    async authenticatedAccountDeactivate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.authenticatedAccountDeactivateRaw(initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PasswordHashingAlgorithm } from './PasswordHashingAlgorithm';
import {
    PasswordHashingAlgorithmFromJSON,
    PasswordHashingAlgorithmFromJSONTyped,
    PasswordHashingAlgorithmToJSON,
    PasswordHashingAlgorithmToJSONTyped,
} from './PasswordHashingAlgorithm';
import type { AdminUserCountsResponse } from './AdminUserCountsResponse';
import {
    AdminUserCountsResponseFromJSON,
    AdminUserCountsResponseFromJSONTyped,
    AdminUserCountsResponseToJSON,
    AdminUserCountsResponseToJSONTyped,
} from './AdminUserCountsResponse';
import type { RankType } from './RankType';
import {
    RankTypeFromJSON,
    RankTypeFromJSONTyped,
    RankTypeToJSON,
    RankTypeToJSONTyped,
} from './RankType';

/**
 * 
 * @export
 * @interface AdminUserResponse
 */
export interface AdminUserResponse {
    /**
     * 
     * @type {string}
     * @memberof AdminUserResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AdminUserResponse
     */
    name: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdminUserResponse
     */
    email: string | null;
    /**
     * 
     * @type {PasswordHashingAlgorithm}
     * @memberof AdminUserResponse
     */
    passwordHashType: PasswordHashingAlgorithm;
    /**
     * 
     * @type {Date}
     * @memberof AdminUserResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUserResponse
     */
    emailActivated: boolean;
    /**
     * 
     * @type {RankType}
     * @memberof AdminUserResponse
     */
    rank: RankType;
    /**
     * 
     * @type {AdminUserCountsResponse}
     * @memberof AdminUserResponse
     */
    counts: AdminUserCountsResponse;
}



/**
 * Check if a given object implements the AdminUserResponse interface.
 */
export function instanceOfAdminUserResponse(value: object): value is AdminUserResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('passwordHashType' in value) || value['passwordHashType'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('emailActivated' in value) || value['emailActivated'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('counts' in value) || value['counts'] === undefined) return false;
    return true;
}

export function AdminUserResponseFromJSON(json: any): AdminUserResponse {
    return AdminUserResponseFromJSONTyped(json, false);
}

export function AdminUserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminUserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'passwordHashType': PasswordHashingAlgorithmFromJSON(json['passwordHashType']),
        'createdAt': (new Date(json['createdAt'])),
        'emailActivated': json['emailActivated'],
        'rank': RankTypeFromJSON(json['rank']),
        'counts': AdminUserCountsResponseFromJSON(json['counts']),
    };
}

  export function AdminUserResponseToJSON(json: any): AdminUserResponse {
      return AdminUserResponseToJSONTyped(json, false);
  }

  export function AdminUserResponseToJSONTyped(value?: AdminUserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'email': value['email'],
        'passwordHashType': PasswordHashingAlgorithmToJSON(value['passwordHashType']),
        'createdAt': ((value['createdAt']).toISOString()),
        'emailActivated': value['emailActivated'],
        'rank': RankTypeToJSON(value['rank']),
        'counts': AdminUserCountsResponseToJSON(value['counts']),
    };
}


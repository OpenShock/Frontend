/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PublicShareDevice } from './PublicShareDevice';
import {
    PublicShareDeviceFromJSON,
    PublicShareDeviceFromJSONTyped,
    PublicShareDeviceToJSON,
    PublicShareDeviceToJSONTyped,
} from './PublicShareDevice';
import type { BasicUserInfo } from './BasicUserInfo';
import {
    BasicUserInfoFromJSON,
    BasicUserInfoFromJSONTyped,
    BasicUserInfoToJSON,
    BasicUserInfoToJSONTyped,
} from './BasicUserInfo';

/**
 * 
 * @export
 * @interface PublicShareResponse
 */
export interface PublicShareResponse {
    /**
     * 
     * @type {string}
     * @memberof PublicShareResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PublicShareResponse
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof PublicShareResponse
     */
    createdOn: Date;
    /**
     * 
     * @type {Date}
     * @memberof PublicShareResponse
     */
    expiresOn?: Date | null;
    /**
     * 
     * @type {BasicUserInfo}
     * @memberof PublicShareResponse
     */
    author: BasicUserInfo;
    /**
     * 
     * @type {Array<PublicShareDevice>}
     * @memberof PublicShareResponse
     */
    devices?: Array<PublicShareDevice>;
}

/**
 * Check if a given object implements the PublicShareResponse interface.
 */
export function instanceOfPublicShareResponse(value: object): value is PublicShareResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('createdOn' in value) || value['createdOn'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    return true;
}

export function PublicShareResponseFromJSON(json: any): PublicShareResponse {
    return PublicShareResponseFromJSONTyped(json, false);
}

export function PublicShareResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicShareResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'createdOn': (new Date(json['createdOn'])),
        'expiresOn': json['expiresOn'] == null ? undefined : (new Date(json['expiresOn'])),
        'author': BasicUserInfoFromJSON(json['author']),
        'devices': json['devices'] == null ? undefined : ((json['devices'] as Array<any>).map(PublicShareDeviceFromJSON)),
    };
}

export function PublicShareResponseToJSON(json: any): PublicShareResponse {
    return PublicShareResponseToJSONTyped(json, false);
}

export function PublicShareResponseToJSONTyped(value?: PublicShareResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'createdOn': ((value['createdOn']).toISOString()),
        'expiresOn': value['expiresOn'] === null ? null : ((value['expiresOn'] as any)?.toISOString()),
        'author': BasicUserInfoToJSON(value['author']),
        'devices': value['devices'] == null ? undefined : ((value['devices'] as Array<any>).map(PublicShareDeviceToJSON)),
    };
}


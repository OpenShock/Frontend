/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ShockerResponse } from './ShockerResponse';
import {
    ShockerResponseFromJSON,
    ShockerResponseFromJSONTyped,
    ShockerResponseToJSON,
    ShockerResponseToJSONTyped,
} from './ShockerResponse';

/**
 * 
 * @export
 * @interface ResponseDeviceWithShockers
 */
export interface ResponseDeviceWithShockers {
    /**
     * 
     * @type {string}
     * @memberof ResponseDeviceWithShockers
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseDeviceWithShockers
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof ResponseDeviceWithShockers
     */
    createdOn: Date;
    /**
     * 
     * @type {Array<ShockerResponse>}
     * @memberof ResponseDeviceWithShockers
     */
    shockers: Array<ShockerResponse>;
}

/**
 * Check if a given object implements the ResponseDeviceWithShockers interface.
 */
export function instanceOfResponseDeviceWithShockers(value: object): value is ResponseDeviceWithShockers {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('createdOn' in value) || value['createdOn'] === undefined) return false;
    if (!('shockers' in value) || value['shockers'] === undefined) return false;
    return true;
}

export function ResponseDeviceWithShockersFromJSON(json: any): ResponseDeviceWithShockers {
    return ResponseDeviceWithShockersFromJSONTyped(json, false);
}

export function ResponseDeviceWithShockersFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseDeviceWithShockers {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'createdOn': (new Date(json['createdOn'])),
        'shockers': ((json['shockers'] as Array<any>).map(ShockerResponseFromJSON)),
    };
}

export function ResponseDeviceWithShockersToJSON(json: any): ResponseDeviceWithShockers {
    return ResponseDeviceWithShockersToJSONTyped(json, false);
}

export function ResponseDeviceWithShockersToJSONTyped(value?: ResponseDeviceWithShockers | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'createdOn': ((value['createdOn']).toISOString()),
        'shockers': ((value['shockers'] as Array<any>).map(ShockerResponseToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfigurationValueType } from './ConfigurationValueType';
import {
    ConfigurationValueTypeFromJSON,
    ConfigurationValueTypeFromJSONTyped,
    ConfigurationValueTypeToJSON,
    ConfigurationValueTypeToJSONTyped,
} from './ConfigurationValueType';

/**
 * Data transfer object representing a configuration item.
 * @export
 * @interface ConfigurationItemDto
 */
export interface ConfigurationItemDto {
    /**
     * The unique name of the configuration item.
     * @type {string}
     * @memberof ConfigurationItemDto
     */
    name: string;
    /**
     * A human-readable description of what this configuration item controls.
     * @type {string}
     * @memberof ConfigurationItemDto
     */
    description: string;
    /**
     * 
     * @type {ConfigurationValueType}
     * @memberof ConfigurationItemDto
     */
    type: ConfigurationValueType;
    /**
     * The current value of the configuration item, serialized as a string.
     * @type {string}
     * @memberof ConfigurationItemDto
     */
    value: string;
    /**
     * The timestamp when the configuration was last updated.
     * @type {Date}
     * @memberof ConfigurationItemDto
     */
    updatedAt: Date;
    /**
     * The timestamp when the configuration was originally created.
     * @type {Date}
     * @memberof ConfigurationItemDto
     */
    createdAt: Date;
}



/**
 * Check if a given object implements the ConfigurationItemDto interface.
 */
export function instanceOfConfigurationItemDto(value: object): value is ConfigurationItemDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function ConfigurationItemDtoFromJSON(json: any): ConfigurationItemDto {
    return ConfigurationItemDtoFromJSONTyped(json, false);
}

export function ConfigurationItemDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurationItemDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'type': ConfigurationValueTypeFromJSON(json['type']),
        'value': json['value'],
        'updatedAt': (new Date(json['updatedAt'])),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function ConfigurationItemDtoToJSON(json: any): ConfigurationItemDto {
    return ConfigurationItemDtoToJSONTyped(json, false);
}

export function ConfigurationItemDtoToJSONTyped(value?: ConfigurationItemDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'type': ConfigurationValueTypeToJSON(value['type']),
        'value': value['value'],
        'updatedAt': value['updatedAt'].toISOString(),
        'createdAt': value['createdAt'].toISOString(),
    };
}


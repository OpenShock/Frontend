/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request DTO for updating a configuration item.
 * Either OpenShock.API.Controller.Admin.DTOs.ConfigurationUpdateItemRequest.Description or OpenShock.API.Controller.Admin.DTOs.ConfigurationUpdateItemRequest.Value (or both) may be provided.
 * If both are null, no update action is performed.
 * @export
 * @interface ConfigurationUpdateItemRequest
 */
export interface ConfigurationUpdateItemRequest {
    /**
     * The name of the configuration item to update.
     * Must consist only of uppercase letters and underscores.
     * @type {string}
     * @memberof ConfigurationUpdateItemRequest
     */
    name: string;
    /**
     * (Optional) New description for the configuration item.
     * @type {string}
     * @memberof ConfigurationUpdateItemRequest
     */
    description?: string | null;
    /**
     * (Optional) New value for the configuration item.
     * Must match the format expected by its existing OpenShock.Common.OpenShockDb.ConfigurationValueType.
     * @type {string}
     * @memberof ConfigurationUpdateItemRequest
     */
    value?: string | null;
}

/**
 * Check if a given object implements the ConfigurationUpdateItemRequest interface.
 */
export function instanceOfConfigurationUpdateItemRequest(value: object): value is ConfigurationUpdateItemRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ConfigurationUpdateItemRequestFromJSON(json: any): ConfigurationUpdateItemRequest {
    return ConfigurationUpdateItemRequestFromJSONTyped(json, false);
}

export function ConfigurationUpdateItemRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurationUpdateItemRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function ConfigurationUpdateItemRequestToJSON(json: any): ConfigurationUpdateItemRequest {
    return ConfigurationUpdateItemRequestToJSONTyped(json, false);
}

export function ConfigurationUpdateItemRequestToJSONTyped(value?: ConfigurationUpdateItemRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'value': value['value'],
    };
}


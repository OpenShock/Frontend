/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LcgNodeResponseV2,
  OpenShockProblem,
} from '../models/index';
import {
    LcgNodeResponseV2FromJSON,
    LcgNodeResponseV2ToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
} from '../models/index';

export interface DeviceGetLiveControlGatewayV2Request {
    version?: number;
}

/**
 * HubEndpointsApi - interface
 * 
 * @export
 * @interface HubEndpointsApiInterface
 */
export interface HubEndpointsApiInterface {
    /**
     * 
     * @summary Gets the best suited LCG node for the client
     * @param {number} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEndpointsApiInterface
     */
    deviceGetLiveControlGatewayV2Raw(requestParameters: DeviceGetLiveControlGatewayV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgNodeResponseV2>>;

    /**
     * Gets the best suited LCG node for the client
     */
    deviceGetLiveControlGatewayV2(version?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgNodeResponseV2>;

}

/**
 * 
 */
export class HubEndpointsApi extends runtime.BaseAPI implements HubEndpointsApiInterface {

    /**
     * Gets the best suited LCG node for the client
     */
    async deviceGetLiveControlGatewayV2Raw(requestParameters: DeviceGetLiveControlGatewayV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LcgNodeResponseV2>> {
        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["DeviceToken"] = await this.configuration.apiKey("DeviceToken"); // HubToken authentication
        }

        const response = await this.request({
            path: `/2/device/assignLCG`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LcgNodeResponseV2FromJSON(jsonValue));
    }

    /**
     * Gets the best suited LCG node for the client
     */
    async deviceGetLiveControlGatewayV2(version?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LcgNodeResponseV2> {
        const response = await this.deviceGetLiveControlGatewayV2Raw({ version: version }, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkUserShareShockersUpdateRequest,
  CreateShareRequest,
  OpenShockProblem,
  PauseUserShareShockersRequest,
  PauseUserShareShockersResponse,
  RemoveUserSharesResponse,
  ShareInviteBaseDetails,
  V2UserShares,
  V2UserSharesListItem,
} from '../models/index';
import {
    BulkUserShareShockersUpdateRequestFromJSON,
    BulkUserShareShockersUpdateRequestToJSON,
    CreateShareRequestFromJSON,
    CreateShareRequestToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    PauseUserShareShockersRequestFromJSON,
    PauseUserShareShockersRequestToJSON,
    PauseUserShareShockersResponseFromJSON,
    PauseUserShareShockersResponseToJSON,
    RemoveUserSharesResponseFromJSON,
    RemoveUserSharesResponseToJSON,
    ShareInviteBaseDetailsFromJSON,
    ShareInviteBaseDetailsToJSON,
    V2UserSharesFromJSON,
    V2UserSharesToJSON,
    V2UserSharesListItemFromJSON,
    V2UserSharesListItemToJSON,
} from '../models/index';

export interface UserSharesBulkPauseUserShareShockersRequest {
    userId: string;
    pauseUserShareShockersRequest?: PauseUserShareShockersRequest;
}

export interface UserSharesBulkRemoveUserShareShockersRequest {
    userId: string;
    requestBody?: Array<string>;
}

export interface UserSharesBulkUserShareShockersUpdateRequest {
    userId: string;
    bulkUserShareShockersUpdateRequest?: BulkUserShareShockersUpdateRequest;
}

export interface UserSharesCreateShareInviteRequest {
    createShareRequest?: CreateShareRequest;
}

export interface UserSharesDeleteOutgoingInviteRequest {
    inviteId: string;
}

export interface UserSharesDenyIncomingInviteRequest {
    inviteId: string;
}

export interface UserSharesRedeemInviteRequest {
    inviteId: string;
}

/**
 * UserShockerSharesApi - interface
 * 
 * @export
 * @interface UserShockerSharesApiInterface
 */
export interface UserShockerSharesApiInterface {
    /**
     * 
     * @param {string} userId 
     * @param {PauseUserShareShockersRequest} [pauseUserShareShockersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesBulkPauseUserShareShockersRaw(requestParameters: UserSharesBulkPauseUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseUserShareShockersResponse>>;

    /**
     */
    userSharesBulkPauseUserShareShockers(userId: string, pauseUserShareShockersRequest?: PauseUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseUserShareShockersResponse>;

    /**
     * 
     * @param {string} userId 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesBulkRemoveUserShareShockersRaw(requestParameters: UserSharesBulkRemoveUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveUserSharesResponse>>;

    /**
     */
    userSharesBulkRemoveUserShareShockers(userId: string, requestBody?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveUserSharesResponse>;

    /**
     * 
     * @summary Update user shares for a shocker
     * @param {string} userId 
     * @param {BulkUserShareShockersUpdateRequest} [bulkUserShareShockersUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesBulkUserShareShockersUpdateRaw(requestParameters: UserSharesBulkUserShareShockersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update user shares for a shocker
     */
    userSharesBulkUserShareShockersUpdate(userId: string, bulkUserShareShockersUpdateRequest?: BulkUserShareShockersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {CreateShareRequest} [createShareRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesCreateShareInviteRaw(requestParameters: UserSharesCreateShareInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    userSharesCreateShareInvite(createShareRequest?: CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesDeleteOutgoingInviteRaw(requestParameters: UserSharesDeleteOutgoingInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    userSharesDeleteOutgoingInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesDenyIncomingInviteRaw(requestParameters: UserSharesDenyIncomingInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    userSharesDenyIncomingInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesGetIncomingInvitesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareInviteBaseDetails>>>;

    /**
     */
    userSharesGetIncomingInvitesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareInviteBaseDetails>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesGetOutgoingInvitesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareInviteBaseDetails>>>;

    /**
     */
    userSharesGetOutgoingInvitesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareInviteBaseDetails>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesGetSharesByUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2UserShares>>;

    /**
     */
    userSharesGetSharesByUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2UserShares>;

    /**
     * 
     * @summary Accept a share request and share the shockers with the current user.
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserShockerSharesApiInterface
     */
    userSharesRedeemInviteRaw(requestParameters: UserSharesRedeemInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2UserSharesListItem>>;

    /**
     * Accept a share request and share the shockers with the current user.
     */
    userSharesRedeemInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2UserSharesListItem>;

}

/**
 * 
 */
export class UserShockerSharesApi extends runtime.BaseAPI implements UserShockerSharesApiInterface {

    /**
     */
    async userSharesBulkPauseUserShareShockersRaw(requestParameters: UserSharesBulkPauseUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PauseUserShareShockersResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userSharesBulkPauseUserShareShockers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/shares/user/{userId}/shockers/pause`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PauseUserShareShockersRequestToJSON(requestParameters['pauseUserShareShockersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PauseUserShareShockersResponseFromJSON(jsonValue));
    }

    /**
     */
    async userSharesBulkPauseUserShareShockers(userId: string, pauseUserShareShockersRequest?: PauseUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PauseUserShareShockersResponse> {
        const response = await this.userSharesBulkPauseUserShareShockersRaw({ userId: userId, pauseUserShareShockersRequest: pauseUserShareShockersRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async userSharesBulkRemoveUserShareShockersRaw(requestParameters: UserSharesBulkRemoveUserShareShockersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveUserSharesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userSharesBulkRemoveUserShareShockers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/shares/user/{userId}/shockers`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveUserSharesResponseFromJSON(jsonValue));
    }

    /**
     */
    async userSharesBulkRemoveUserShareShockers(userId: string, requestBody?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveUserSharesResponse> {
        const response = await this.userSharesBulkRemoveUserShareShockersRaw({ userId: userId, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     * Update user shares for a shocker
     */
    async userSharesBulkUserShareShockersUpdateRaw(requestParameters: UserSharesBulkUserShareShockersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userSharesBulkUserShareShockersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/shares/user/{userId}/shockers`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUserShareShockersUpdateRequestToJSON(requestParameters['bulkUserShareShockersUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update user shares for a shocker
     */
    async userSharesBulkUserShareShockersUpdate(userId: string, bulkUserShareShockersUpdateRequest?: BulkUserShareShockersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userSharesBulkUserShareShockersUpdateRaw({ userId: userId, bulkUserShareShockersUpdateRequest: bulkUserShareShockersUpdateRequest }, initOverrides);
    }

    /**
     */
    async userSharesCreateShareInviteRaw(requestParameters: UserSharesCreateShareInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/shares/user/invites`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShareRequestToJSON(requestParameters['createShareRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async userSharesCreateShareInvite(createShareRequest?: CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.userSharesCreateShareInviteRaw({ createShareRequest: createShareRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async userSharesDeleteOutgoingInviteRaw(requestParameters: UserSharesDeleteOutgoingInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['inviteId'] == null) {
            throw new runtime.RequiredError(
                'inviteId',
                'Required parameter "inviteId" was null or undefined when calling userSharesDeleteOutgoingInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user/invites/outgoing/{inviteId}`;
        urlPath = urlPath.replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters['inviteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userSharesDeleteOutgoingInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userSharesDeleteOutgoingInviteRaw({ inviteId: inviteId }, initOverrides);
    }

    /**
     */
    async userSharesDenyIncomingInviteRaw(requestParameters: UserSharesDenyIncomingInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['inviteId'] == null) {
            throw new runtime.RequiredError(
                'inviteId',
                'Required parameter "inviteId" was null or undefined when calling userSharesDenyIncomingInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user/invites/incoming/{inviteId}`;
        urlPath = urlPath.replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters['inviteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userSharesDenyIncomingInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userSharesDenyIncomingInviteRaw({ inviteId: inviteId }, initOverrides);
    }

    /**
     */
    async userSharesGetIncomingInvitesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareInviteBaseDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user/invites/incoming`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareInviteBaseDetailsFromJSON));
    }

    /**
     */
    async userSharesGetIncomingInvitesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareInviteBaseDetails>> {
        const response = await this.userSharesGetIncomingInvitesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userSharesGetOutgoingInvitesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareInviteBaseDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user/invites/outgoing`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareInviteBaseDetailsFromJSON));
    }

    /**
     */
    async userSharesGetOutgoingInvitesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareInviteBaseDetails>> {
        const response = await this.userSharesGetOutgoingInvitesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userSharesGetSharesByUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2UserShares>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2UserSharesFromJSON(jsonValue));
    }

    /**
     */
    async userSharesGetSharesByUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2UserShares> {
        const response = await this.userSharesGetSharesByUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Accept a share request and share the shockers with the current user.
     */
    async userSharesRedeemInviteRaw(requestParameters: UserSharesRedeemInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2UserSharesListItem>> {
        if (requestParameters['inviteId'] == null) {
            throw new runtime.RequiredError(
                'inviteId',
                'Required parameter "inviteId" was null or undefined when calling userSharesRedeemInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/shares/user/invites/incoming/{inviteId}`;
        urlPath = urlPath.replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters['inviteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2UserSharesListItemFromJSON(jsonValue));
    }

    /**
     * Accept a share request and share the shockers with the current user.
     */
    async userSharesRedeemInvite(inviteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2UserSharesListItem> {
        const response = await this.userSharesRedeemInviteRaw({ inviteId: inviteId }, initOverrides);
        return await response.value();
    }

}

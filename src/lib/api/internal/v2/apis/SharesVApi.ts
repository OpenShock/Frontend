/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateShareRequest,
  GenericIni,
  OpenShockProblem,
  ShareInfo,
  ShareRequestBaseDetails,
  ShareRequestBaseItem,
} from '../models/index';
import {
    CreateShareRequestFromJSON,
    CreateShareRequestToJSON,
    GenericIniFromJSON,
    GenericIniToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    ShareInfoFromJSON,
    ShareInfoToJSON,
    ShareRequestBaseDetailsFromJSON,
    ShareRequestBaseDetailsToJSON,
    ShareRequestBaseItemFromJSON,
    ShareRequestBaseItemToJSON,
} from '../models/index';

export interface SharesVCreateShareRequest {
    createShareRequest?: CreateShareRequest;
}

export interface SharesVDeleteRequestRequest {
    id: string;
}

export interface SharesVDenyRequestRequest {
    id: string;
}

export interface SharesVGetRequestRequest {
    id: string;
}

export interface SharesVGetSharesToUserRequest {
    userId: string;
}

/**
 * SharesVApi - interface
 * 
 * @export
 * @interface SharesVApiInterface
 */
export interface SharesVApiInterface {
    /**
     * 
     * @param {CreateShareRequest} [createShareRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVCreateShareRaw(requestParameters: SharesVCreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    sharesVCreateShare(createShareRequest?: CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVDeleteRequestRaw(requestParameters: SharesVDeleteRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     */
    sharesVDeleteRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVDenyRequestRaw(requestParameters: SharesVDenyRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     */
    sharesVDenyRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVGetIncomingRequestsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareRequestBaseItem>>>;

    /**
     */
    sharesVGetIncomingRequestsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareRequestBaseItem>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVGetOutstandingRequestsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareRequestBaseItem>>>;

    /**
     */
    sharesVGetOutstandingRequestsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareRequestBaseItem>>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVGetRequestRaw(requestParameters: SharesVGetRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareRequestBaseDetails>>;

    /**
     */
    sharesVGetRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareRequestBaseDetails>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVGetSharesByUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GenericIni>>>;

    /**
     */
    sharesVGetSharesByUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GenericIni>>;

    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharesVApiInterface
     */
    sharesVGetSharesToUserRaw(requestParameters: SharesVGetSharesToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfo>>;

    /**
     */
    sharesVGetSharesToUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfo>;

}

/**
 * 
 */
export class SharesVApi extends runtime.BaseAPI implements SharesVApiInterface {

    /**
     */
    async sharesVCreateShareRaw(requestParameters: SharesVCreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShareRequestToJSON(requestParameters['createShareRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sharesVCreateShare(createShareRequest?: CreateShareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sharesVCreateShareRaw({ createShareRequest: createShareRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVDeleteRequestRaw(requestParameters: SharesVDeleteRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sharesVDeleteRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests/outgoing/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sharesVDeleteRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sharesVDeleteRequestRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVDenyRequestRaw(requestParameters: SharesVDenyRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sharesVDenyRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests/incoming/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sharesVDenyRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sharesVDenyRequestRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVGetIncomingRequestsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareRequestBaseItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests/incoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareRequestBaseItemFromJSON));
    }

    /**
     */
    async sharesVGetIncomingRequestsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareRequestBaseItem>> {
        const response = await this.sharesVGetIncomingRequestsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVGetOutstandingRequestsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareRequestBaseItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests/outstanding`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareRequestBaseItemFromJSON));
    }

    /**
     */
    async sharesVGetOutstandingRequestsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareRequestBaseItem>> {
        const response = await this.sharesVGetOutstandingRequestsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVGetRequestRaw(requestParameters: SharesVGetRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareRequestBaseDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sharesVGetRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/requests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareRequestBaseDetailsFromJSON(jsonValue));
    }

    /**
     */
    async sharesVGetRequest(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareRequestBaseDetails> {
        const response = await this.sharesVGetRequestRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVGetSharesByUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GenericIni>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GenericIniFromJSON));
    }

    /**
     */
    async sharesVGetSharesByUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GenericIni>> {
        const response = await this.sharesVGetSharesByUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sharesVGetSharesToUserRaw(requestParameters: SharesVGetSharesToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareInfo>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sharesVGetSharesToUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["OpenShockToken"] = await this.configuration.apiKey("OpenShockToken"); // OpenShockToken authentication
        }

        const response = await this.request({
            path: `/2/shares/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareInfoFromJSON(jsonValue));
    }

    /**
     */
    async sharesVGetSharesToUser(userId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareInfo> {
        const response = await this.sharesVGetSharesToUserRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

}

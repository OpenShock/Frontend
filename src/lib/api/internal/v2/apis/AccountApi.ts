/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeUsernameRequest,
  LegacyEmptyResponse,
  LoginV2,
  LoginV2OkResponse,
  OpenShockProblem,
  PasswordResetRequestV2,
  SignUpV2,
  UsernameCheckResponse,
} from '../models/index';
import {
    ChangeUsernameRequestFromJSON,
    ChangeUsernameRequestToJSON,
    LegacyEmptyResponseFromJSON,
    LegacyEmptyResponseToJSON,
    LoginV2FromJSON,
    LoginV2ToJSON,
    LoginV2OkResponseFromJSON,
    LoginV2OkResponseToJSON,
    OpenShockProblemFromJSON,
    OpenShockProblemToJSON,
    PasswordResetRequestV2FromJSON,
    PasswordResetRequestV2ToJSON,
    SignUpV2FromJSON,
    SignUpV2ToJSON,
    UsernameCheckResponseFromJSON,
    UsernameCheckResponseToJSON,
} from '../models/index';

export interface AccountActivateRequest {
    token?: string;
}

export interface AccountCheckUsernameRequest {
    changeUsernameRequest?: ChangeUsernameRequest;
}

export interface AccountEmailVerifyRequest {
    token?: string;
}

export interface AccountLoginV2Request {
    loginV2?: LoginV2;
}

export interface AccountPasswordResetInitiateV2Request {
    passwordResetRequestV2?: PasswordResetRequestV2;
}

export interface AccountSignUpV2Request {
    signUpV2?: SignUpV2;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Activate account
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountActivateRaw(requestParameters: AccountActivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Activate account
     */
    accountActivate(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Check if a username is available
     * @param {ChangeUsernameRequest} [changeUsernameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountCheckUsernameRaw(requestParameters: AccountCheckUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameCheckResponse>>;

    /**
     * Check if a username is available
     */
    accountCheckUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameCheckResponse>;

    /**
     * 
     * @summary Verify account email
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountEmailVerifyRaw(requestParameters: AccountEmailVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify account email
     */
    accountEmailVerify(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Authenticate a user
     * @param {LoginV2} [loginV2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountLoginV2Raw(requestParameters: AccountLoginV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginV2OkResponse>>;

    /**
     * Authenticate a user
     */
    accountLoginV2(loginV2?: LoginV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginV2OkResponse>;

    /**
     * 
     * @summary Initiate a password reset
     * @param {PasswordResetRequestV2} [passwordResetRequestV2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountPasswordResetInitiateV2Raw(requestParameters: AccountPasswordResetInitiateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Initiate a password reset
     */
    accountPasswordResetInitiateV2(passwordResetRequestV2?: PasswordResetRequestV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Signs up a new user
     * @param {SignUpV2} [signUpV2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountSignUpV2Raw(requestParameters: AccountSignUpV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>>;

    /**
     * Signs up a new user
     */
    accountSignUpV2(signUpV2?: SignUpV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Activate account
     */
    async accountActivateRaw(requestParameters: AccountActivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/account/activate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate account
     */
    async accountActivate(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountActivateRaw({ token: token }, initOverrides);
    }

    /**
     * Check if a username is available
     */
    async accountCheckUsernameRaw(requestParameters: AccountCheckUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/account/username/check`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUsernameRequestToJSON(requestParameters['changeUsernameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsernameCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check if a username is available
     */
    async accountCheckUsername(changeUsernameRequest?: ChangeUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameCheckResponse> {
        const response = await this.accountCheckUsernameRaw({ changeUsernameRequest: changeUsernameRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Verify account email
     */
    async accountEmailVerifyRaw(requestParameters: AccountEmailVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/2/account/verify-email`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify account email
     */
    async accountEmailVerify(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountEmailVerifyRaw({ token: token }, initOverrides);
    }

    /**
     * Authenticate a user
     */
    async accountLoginV2Raw(requestParameters: AccountLoginV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginV2OkResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/account/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginV2ToJSON(requestParameters['loginV2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginV2OkResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user
     */
    async accountLoginV2(loginV2?: LoginV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginV2OkResponse> {
        const response = await this.accountLoginV2Raw({ loginV2: loginV2 }, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a password reset
     */
    async accountPasswordResetInitiateV2Raw(requestParameters: AccountPasswordResetInitiateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/account/reset-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetRequestV2ToJSON(requestParameters['passwordResetRequestV2']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate a password reset
     */
    async accountPasswordResetInitiateV2(passwordResetRequestV2?: PasswordResetRequestV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountPasswordResetInitiateV2Raw({ passwordResetRequestV2: passwordResetRequestV2 }, initOverrides);
    }

    /**
     * Signs up a new user
     */
    async accountSignUpV2Raw(requestParameters: AccountSignUpV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LegacyEmptyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/2/account/signup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpV2ToJSON(requestParameters['signUpV2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LegacyEmptyResponseFromJSON(jsonValue));
    }

    /**
     * Signs up a new user
     */
    async accountSignUpV2(signUpV2?: SignUpV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LegacyEmptyResponse> {
        const response = await this.accountSignUpV2Raw({ signUpV2: signUpV2 }, initOverrides);
        return await response.value();
    }

}
